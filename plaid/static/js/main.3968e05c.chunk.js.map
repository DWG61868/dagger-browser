{"version":3,"sources":["Routes.tsx","models/Config.tsx","components/CodeLink.tsx","components/NodeIcon.tsx","components/NodeWeight.tsx","components/NodeLink.tsx","components/SubcomponentLink.tsx","components/ComponentLink.tsx","components/ComponentSummary.tsx","components/NodeAutosuggest.tsx","components/BrowserHeader.tsx","components/Home.tsx","models/GraphManager.tsx","components/ModuleSummary.tsx","components/GraphSelector.tsx","components/NodeSummary.tsx","components/ScopeSummary.tsx","components/NodeClosure.tsx","components/SubcomponentSummary.tsx","components/WeightSelector.tsx","components/GraphBrowser.tsx","service/BindingsService.tsx","models/ClassSize.tsx","service/ClassSizeService.tsx","service/GraphSizeService.tsx","service/WeightServiceManager.tsx","App.tsx","index.tsx"],"names":["Paths","Home","Component","Module","GraphModule","GraphScope","GraphNode","GraphClosure","SubComponent","Routes","component","encodeURIComponent","module","node","scope","key","subcomponent","TITLE","data","title","REPO_URL","repo_url","PUBLIC_URL","process","CodeLink","link","Config","filename","split","pop","rel","target","href","className","getNodeIcon","kind","label","color","NodeIcon","icon","classNames","getWeightColor","weight","value","largeThreshold","smallThreshold","NodeWeight","summary","unit","NodeLink","onSelect","undefined","scoped","onClick","replace","SubcomponentLink","subcomponentName","index","lastIndexOf","substring","getDisplayName","ComponentLink","componentName","to","ComponentSummary","graphManager","weightService","graph","getComponent","history","useHistory","scopedBindings","nodes","filter","binding","componentSet","Set","forEach","add","membersInjectors","multiBindings","sort","nodeA","nodeB","weightA","getWeight","weightB","length","map","size","Array","from","getSubcomponentWeight","push","MAX_SUGGESTIONS","NodeAutosuggest","useState","query","setQuery","searchRef","useRef","suggestions","useMemo","getMatches","trim","toLowerCase","getSuggestions","autoFocusInput","event","metaKey","current","input","focus","useEffect","window","addEventListener","removeEventListener","ref","onSuggestionsFetchRequested","onSuggestionsClearRequested","onSuggestionSelected","_","suggestion","getSuggestionValue","renderSuggestion","inputProps","placeholder","onChange","params","newValue","BrowserHeader","weightServiceManager","components","getWeightService","name","ALL_COMPONENTS","GraphManager","classInfo","nodeMap","componentMap","subcomponentWeights","callsitesMap","axios","get","classInfoResponse","this","manifestResponse","populateCaches","max","strictMatch","matches","includes","Error","moduleName","Object","values","bindings","reference","getNode","referenceNode","dependencies","find","d","graphReducer","computeWeightForNodes","result","queue","visited","queueNode","shift","reduce","dependency","shouldSkipWeight","dependencyKey","bindingInComponent","shouldSkipNode","dep","ModuleSummary","graphModule","getModule","displayName","pos","GraphSelector","graphs","selectGraph","graphOptions","toString","defaultValue","classNamePrefix","options","NodeSummary","nodeName","bindingModule","availableGraphs","it","callsites","getCallsites","ScopeSummary","graphScope","getScope","NO_SCOPE","NodeClosure","moduleBindings","moduleSummary","bindingKey","modules","getDependencies","scopedDependencies","keys","idx","getScopeDisplayName","parts","i","toUpperCase","slice","join","getModuleDisplayName","SubcomponentSummary","totalBinds","getSubcomponentBindings","WeightSelector","props","metricOptions","getWeightServiceNames","charAt","state","selectedOption","option","setState","onSelectWeight","React","GraphBrowser","includeWeightSelector","selectWeightService","path","render","decodeURIComponent","match","LARGE_THRESHOLD","SMALL_THRESHOLD","BindingsService","nodeWeights","computeNodeWeight","GraphReducerImpl","ClassSize","Math","round","method_count","lambda_count","field_count","inner_class_count","classSize","count","ClassSizeService","getClassSize","getMemorySize","getSummary","info","GraphSizeService","classSizeService","assign","initialKey","reduced","parentClassSize","has","childClassSize","WeightServiceManager","weightServices","App","load","loaded","ReactRouterRoute","Route","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3968e05c.chunk.js","sourcesContent":["/**\n * Provides all of the route helpers\n */\nexport class Paths {\n  static Home = \"/:component?\"\n  static Component = \"/:component\"\n  static Module = \"/module/:module\"\n  static GraphModule = \"/:component/module/:module\"\n  static GraphScope = \"/:component/scope/:scope\"\n  static GraphNode = \"/:component/node/:node\"\n  static GraphClosure = \"/:component/closure/:key\"\n  static SubComponent = \"/:component/:subcomponent\"\n}\n\nexport class Routes {\n  static Home = \"/\"\n  static Component = (component: string): string => {\n    return `/${encodeURIComponent(component)}`;\n  }\n  static Module = (module: string): string => {\n    return `/module/${encodeURIComponent(module)}`;\n  }\n  static GraphNode = (component: string, node: string): string => {\n    return `/${encodeURIComponent(component)}/node/${encodeURIComponent(node)}`;\n  }\n  static GraphModule = (component: string, module: string): string => {\n    return `/${encodeURIComponent(component)}/module/${encodeURIComponent(module)}`;\n  }\n  static GraphScope = (component: string, scope: string): string => {\n    return `/${encodeURIComponent(component)}/scope/${encodeURIComponent(scope)}`;\n  }\n  static GraphClosure = (component: string, key: string): string => {\n    return `/${encodeURIComponent(component)}/closure/${encodeURIComponent(key)}`;\n  }\n\n  static SubComponent = (component: string, subcomponent: string): string => {\n    return `/${encodeURIComponent(component)}/${encodeURIComponent(subcomponent)}`;\n  }\n}\n\nexport default Routes;","/**\n * Configuration class based on input Config.json\n */\n\nimport data from \"src/Config.json\";\n\ninterface Config {\n  // Title of the page\n  TITLE: string;\n  // Url to the code in github repo\n  REPO_URL?: string;\n  // Public Url\n  PUBLIC_URL: string\n}\n\nexport default {\n  TITLE: data.title || \"Graph Browser\",\n  REPO_URL: data.repo_url || \"\",\n  PUBLIC_URL: process.env.PUBLIC_URL || \"\"\n} as Config;","import React from \"react\";\nimport Config from \"../models/Config\";\n\ninterface Props {\n  link: string;\n}\n\nconst CodeLink = ({ link }: Props) => {\n  if (Config.REPO_URL) {\n    let filename = link.split(\".\").pop();\n    return (\n      <a\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n        href={Config.REPO_URL + \"/search?q=filename:\" + filename}\n        className=\"unselectable\"\n      >\n        <i className=\"tiny material-icons\">open_in_new</i>\n      </a>\n    );\n  } else {\n    return <span></span>;\n  }\n};\n\nexport default CodeLink;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\ninterface Props {\n  kind: string | null | undefined;\n}\n\nconst NodeIcon = ({ kind }: Props) => {\n  let icon = getNodeIcon(kind);\n  if (!icon) {\n    return <span />;\n  }\n\n  return (\n    <span className={classNames(\"node-icon\", icon.color)} title={kind || \"\"}>\n      {icon.label}\n    </span>\n  );\n};\n\n// TODO: Make this configurable\nlet getNodeIcon = (\n  kind: string | null | undefined\n): { label: string; color: string } | undefined => {\n  switch (kind) {\n    case \"INSTANCE\": {\n      return { label: \"I\", color: \"deep-purple\" };\n    }\n    case \"PROVIDER\": {\n      return { label: \"P\", color: \"blue\" };\n    }\n    case \"LAZY\": {\n      return { label: \"L\", color: \"indigo\" };\n    }\n    default: {\n      return undefined;\n    }\n  }\n};\n\nexport default NodeIcon;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { Weight } from \"../models/Graph\";\n\ntype Props = {\n  weight: Weight | null | undefined;\n};\n\nconst NodeWeight = ({ weight }: Props) => {\n  if (!weight) {\n    return <span />;\n  }\n\n  return (\n    <span>\n      {weight && weight.value > 0 &&\n        <span\n          className={classNames(\"unselectable\", \"bubble\", getWeightColor(weight))}\n          title={weight.summary}\n        >\n          {weight.value} {weight.unit ? weight.unit : ''}\n        </span>\n      }\n    </span>\n  );\n};\n\nconst getWeightColor = (weight: Weight): string => {\n  if (weight.value > weight.largeThreshold) {\n    return \"red\";\n  } else if (weight.value > weight.smallThreshold) {\n    return \"orange\";\n  } else {\n    return \"green\";\n  }\n};\n\nexport default NodeWeight;\n","import React from \"react\";\nimport { Node, Weight } from \"../models/Graph\";\nimport CodeLink from \"./CodeLink\";\nimport NodeIcon from \"./NodeIcon\";\nimport NodeWeight from \"./NodeWeight\";\n\ntype Props = {\n  node: Node;\n  weight?: Weight;\n  onSelect?: (node: string) => void;\n  scoped?: boolean;\n  kind?: string;\n};\n\nfunction getDisplayName(key: string): string {\n  return key\n    .replace(\"java.util.\", \"\")\n    .replace(\"java.lang.\", \"\")\n    .replace(\"javax.inject.\", \"\")\n    .replace(\"io.reactivex.\", \"\")    \n}\n\nconst NodeLink: React.FC<Props> = ({\n  node,\n  onSelect,\n  weight = undefined,\n  scoped = false,\n  kind\n}: Props) => {\n  const scope = node.scope ? `[${node.scope.split(\".\").pop()}]` : \"\";\n  return (<div>\n    <div\n      className=\"binding\"\n      onClick={() => onSelect && onSelect(node.key)}\n    >\n      <div className=\"text\">\n        <NodeIcon kind={kind || node.kind} />\n        {scoped && <span className=\"light-text\">{scope}&nbsp;</span>}\n        {getDisplayName(node.key)}&nbsp;\n      </div>\n      <div>\n        <CodeLink link={node.key} />\n        <NodeWeight weight={weight} />\n      </div>\n    </div>\n  </div>);\n\n};\n\nexport default NodeLink;\n","import React from \"react\";\nimport { Weight } from \"../models/Graph\";\nimport NodeWeight from \"./NodeWeight\";\n\ntype Props = {\n    subcomponentName: string;\n    weight: Weight;\n    onSelect?: (node: string) => void;\n};\n\n\nfunction getDisplayName(key: string): string {\n    let index = key.lastIndexOf(\".\");\n    return key.substring(index + 1)\n  }\n\nconst SubcomponentLink: React.FC<Props> = ({\n  subcomponentName,\n  weight,\n  onSelect\n}: Props) => {\n  return (<div>\n    <div className=\"binding\" onClick={() => onSelect && onSelect(subcomponentName)}>\n      <div className=\"text\">\n        {getDisplayName(subcomponentName)}\n      </div>\n      <div>\n        <NodeWeight weight={weight} />\n      </div>\n    </div>\n  </div>);\n\n};\n\nexport default SubcomponentLink;\n","import React from \"react\";\nimport { Node, Weight } from \"../models/Graph\";\nimport CodeLink from \"./CodeLink\";\nimport Routes from \"src/Routes\";\nimport NodeWeight from \"./NodeWeight\";\nimport { Link } from \"react-router-dom\";\n\ntype Props = {\n  componentName: string;\n  weight?: Weight;\n};\n\nconst ComponentLink: React.FC<Props> = ({\n  componentName,\n  weight = undefined\n}: Props) => {\n  return (<div>\n    <div className=\"binding\">\n      <div className=\"text\">\n        <Link to={Routes.Component(componentName)}>\n        {componentName}\n        </Link>\n      </div>\n      <div>\n        <CodeLink link={componentName} />\n        <NodeWeight weight={weight} />\n      </div>\n    </div>\n    </div>\n  );\n\n};\n\nexport default ComponentLink;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Routes from \"src/Routes\";\nimport GraphManager from \"../models/GraphManager\";\nimport NodeLink from \"./NodeLink\";\nimport WeightService from \"../service/WeightService\";\nimport SubcomponentLink from \"./SubcomponentLink\";\nimport ComponentLink from \"./ComponentLink\";\n\ntype Props = {\n  graphManager: GraphManager;\n  weightService: WeightService;\n  componentName: string;\n  onSelect: (graphName: string, key: string) => any;\n};\n\nconst ComponentSummary = ({ graphManager, weightService, componentName, onSelect }: Props) => {\n  const graph = graphManager.getComponent(componentName);\n  const history = useHistory();\n  const scopedBindings = graph.nodes.filter(binding => !!binding.scope);\n  const componentSet = new Set<string>();\n  graph.nodes\n    .filter(binding => binding.component != undefined && binding.component !== componentName)\n    .forEach(binding => componentSet.add(binding.component as string));\n\n  const membersInjectors = graph.nodes.filter(\n      binding =>\n        binding.kind === \"MEMBERS_INJECTION\"\n    );\n\n  const multiBindings = graph.nodes.filter(\n    binding =>\n      binding.kind === \"MULTIBOUND_SET\" || binding.kind === \"MULTIBOUND_MAP\"\n  );\n\n  scopedBindings.sort((nodeA, nodeB) => {\n    const weightA = weightService.getWeight(componentName, nodeA.key);\n    const weightB = weightService.getWeight(componentName, nodeB.key);\n    return (weightB ? weightB.value : 0) - (weightA ? weightA.value : 0);\n  });\n\n  multiBindings.sort((nodeA, nodeB) => {\n    const weightA = weightService.getWeight(componentName, nodeA.key);\n    const weightB = weightService.getWeight(componentName, nodeB.key);\n    return (weightB ? weightB.value : 0) - (weightA ? weightA.value : 0);\n  });\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"card-title\">\n          <ComponentLink\n            componentName={componentName}\n            weight={weightService.getWeight(componentName)}\n          />\n        </div>\n\n        {membersInjectors.length > 0 &&\n          <div>\n          <br />\n          <h6>Members Injectors:</h6>\n          {membersInjectors.map(binding => {\n            return (\n              <NodeLink\n                key={binding.key}\n                weight={weightService.getWeight(componentName, binding.key)}\n                scoped={true}\n                node={binding}\n                onSelect={node => onSelect(componentName, node)}\n              />\n            );\n          })}\n        </div>\n        }\n\n        {componentSet.size > 0 &&\n          <div>\n            <br />\n            <h6>{componentSet.size} Subcomponents:</h6>\n            {Array.from(componentSet).map(subcomponent => {\n              return (\n                <SubcomponentLink\n                  subcomponentName={subcomponent}\n                  weight={graphManager.getSubcomponentWeight(subcomponent)}\n                  onSelect={node =>\n                    history.push(Routes.SubComponent(componentName, subcomponent))\n                  }\n                />\n              );\n            })}\n          </div>\n        }\n\n        {multiBindings.length > 0 &&\n          <div>\n            <br />\n            <h6>{multiBindings.length} Multibindings:</h6>\n            {multiBindings.map(binding => {\n              return (\n                <NodeLink\n                  key={binding.key}\n                  weight={weightService.getWeight(componentName, binding.key)}\n                  scoped={true}\n                  node={binding}\n                  onSelect={node => onSelect(componentName, node)}\n                />\n              );\n            })}\n          </div>\n        }\n\n        {scopedBindings.length > 0 &&\n          <div>\n            <br />\n            <h6>{scopedBindings.length} Scoped Bindings:</h6>\n            {scopedBindings.map(binding => {\n              return (\n                <NodeLink\n                  key={binding.key}\n                  weight={weightService.getWeight(componentName, binding.key)}\n                  scoped={true}\n                  node={binding}\n                  onSelect={node => onSelect(componentName, node)}\n                />\n              );\n            })}\n          </div>\n        }\n\n      </div>\n    </div>\n  );\n};\n\nexport default ComponentSummary;\n","import React, { useState, useMemo, useRef, useEffect } from \"react\";\nimport GraphManager, { GraphMatchResult } from \"../models/GraphManager\";\nimport Autosuggest from \"react-autosuggest\";\nimport NodeWeight from \"./NodeWeight\";\nimport WeightService from \"../service/WeightService\";\n\nconst MAX_SUGGESTIONS = 40;\n\ninterface Props {\n  graphManager: GraphManager;\n  weightService: WeightService;\n  componentName: string | null | undefined;\n  onSelect: (component: string | undefined, node: string) => any;\n}\n\nfunction getSuggestions(\n  graphManager: GraphManager,\n  componentName: string,\n  value: string\n): GraphMatchResult[] {\n  return graphManager.getMatches(\n    \"\",\n    value.trim().toLowerCase(),\n    MAX_SUGGESTIONS,\n    false\n  );\n}\n\nconst NodeAutosuggest = ({ graphManager, weightService, onSelect, componentName }: Props) => {\n  const [query, setQuery] = useState(\"\");\n  const searchRef = useRef<Autosuggest<GraphMatchResult>>(null);\n\n  const suggestions = useMemo(\n    () => getSuggestions(graphManager, componentName || \"\", query),\n    [graphManager, componentName, query]\n  );\n\n  const autoFocusInput = (event?: KeyboardEvent) => {\n    if (event && event.metaKey) {\n      return false;\n    }\n    searchRef &&\n      searchRef.current &&\n      searchRef.current.input &&\n      searchRef.current.input.focus();\n  };\n\n  useEffect(() => {\n    autoFocusInput();\n    window.addEventListener(\"keydown\", autoFocusInput);\n    return () => window.removeEventListener(\"keydown\", autoFocusInput);\n  }, []);\n\n  return (\n    <Autosuggest<GraphMatchResult>\n      ref={searchRef}\n      suggestions={suggestions}\n      onSuggestionsFetchRequested={() => {}}\n      onSuggestionsClearRequested={() => setQuery(\"\")}\n      onSuggestionSelected={(_, data) => {\n        onSelect(data.suggestion.componentName, data.suggestion.node.key);\n      }}\n      getSuggestionValue={suggestion => suggestion.node.key}\n      // TODO: Replace with simple node\n      renderSuggestion={suggestion => (\n        <div>\n          <span className=\"light-text\">\n            {suggestion.componentName\n              ? \"[\" + suggestion.componentName.split(\".\").pop() + \"] \"\n              : \"\"}\n          </span>\n          {suggestion.node.key}\n          <NodeWeight\n            weight={weightService.getWeight(\n              suggestion.componentName,\n              suggestion.node.key\n            )}\n          />\n        </div>\n      )}\n      inputProps={{\n        value: query,\n        placeholder: \"Find dependencies\",\n        onChange: (_, params) => {\n          setQuery(params.newValue);\n        }\n      }}\n    />\n  );\n};\n\nexport default NodeAutosuggest;\n","import { Link } from \"react-router-dom\";\nimport Config from \"../models/Config\";\nimport Routes from \"../Routes\";\nimport React from \"react\";\nimport WeightServiceManager from \"../service/WeightServiceManager\";\n\nexport interface Props {\n  weightServiceManager: WeightServiceManager;\n}\n\nexport function BrowserHeader({ weightServiceManager }: Props) {\n  return (\n    <nav>\n      <div className=\"container\">\n        <div className=\"nav-wrapper\">\n          <Link to={Routes.Home} className=\"brand-logo\">\n            {Config.TITLE}\n          </Link>\n          <ul className=\"right hide-on-med-and-down\">\n            <li>\n              <a href=\"ComponentsManifest.json\"\n                target=\"_blank\"\n                title=\"Download JSON\"\n              >\n                <i className=\"material-icons\">file_download</i>\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","import React from \"react\";\nimport GraphManager from \"../models/GraphManager\";\nimport { Link } from \"react-router-dom\";\nimport Routes from \"src/Routes\";\nimport CodeLink from \"./CodeLink\";\nimport NodeWeight from \"./NodeWeight\";\nimport WeightServiceManager from \"../service/WeightServiceManager\";\nimport ComponentLink from \"./ComponentLink\";\n\ntype Props = {\n  graphManager: GraphManager;\n  weightServiceManager: WeightServiceManager;\n};\n\nconst Home = ({ graphManager, weightServiceManager }: Props) => {\n\n  var components = graphManager.componentSet.components\n\n  const weightService = weightServiceManager.getWeightService();\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"card-title\">Components</div>\n        {components.map(component => {\n          return <ComponentLink\n            componentName={component.name}\n            weight={weightService.getWeight(component.name)}\n          />\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import GraphReducer from \"./GraphReducer\";\nimport ComponentSet, { Node, Component, Module, Scope, Weight } from \"./Graph\";\nimport axios from \"axios\";\nimport { ClassInfo } from \"./ClassSize\";\nimport Config from \"./Config\";\n\nexport const ALL_COMPONENTS = \"\";\n\nexport type GraphMatchResult = { node: Node; componentName: string };\n\nconst SUBCOMPONENT_LARGE_THRESHOLD = 500;\nconst SUBCOMPONENT_SMALL_THRESHOLD = 10;\n\n/**\n * Wrapper to load the graph\n */\nexport default class GraphManager {\n  componentSet: ComponentSet = { components: [] };\n  classInfo?: { [key: string]: ClassInfo };\n\n  // Caches to speed up graph-based operations\n  private nodeMap: { [componentName: string]: { [key: string]: Node } } = {};\n  private componentMap: { [componentName: string]: Component } = {};\n  private subcomponentWeights: { [key: string]: Weight }  = {};\n  private callsitesMap: {\n    [componentName: string]: { [key: string]: Node[] };\n  } = {};\n\n  async load(): Promise<boolean> {\n    try {\n      let classInfoResponse = await axios.get(Config.PUBLIC_URL + '/ClassInfo.json');\n      this.classInfo = classInfoResponse.data as { [key: string]: ClassInfo };\n    } catch {\n      // classInfo is optional\n    }\n    try {\n      let manifestResponse = await axios.get(Config.PUBLIC_URL + '/ComponentsManifest.json')      \n      this.componentSet = manifestResponse.data as ComponentSet;\n      this.populateCaches();\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  getMatches(\n    componentName: string | undefined,\n    query: string,\n    max: number,\n    strictMatch: boolean\n  ): GraphMatchResult[] {\n    const components = componentName\n      ? [this.getComponent(componentName)]\n      : this.componentSet.components;\n\n    let matches = [];\n\n    for (const component of components) {\n      for (const node of component.nodes) {\n\n        if (strictMatch) {\n          if (node.key.toLowerCase() == query.toLowerCase()) {\n            matches.push({ node, componentName: component.name });\n          }\n        } else if (node.key.toLowerCase().includes(query.toLowerCase())) {\n          matches.push({ node, componentName: component.name });\n        }\n\n        if (matches.length >= max) {\n            return matches;\n        }\n      }\n    }\n\n    return matches;\n  }\n\n  getComponent(componentName: string): Component {\n    const component = this.componentMap[componentName];\n\n    if (!component) {\n      throw Error(`Could not find ${componentName} component`);\n    }\n\n    return component;\n  }\n\n  getNode(component: string | undefined, node: string): Node | undefined {\n    return this.nodeMap[component ? component : ALL_COMPONENTS][node];\n  }\n\n  getModule(component: string, moduleName: string): Module {\n    const nodes = Object.values(this.nodeMap[component]).filter((node: Node) => {\n      return node.module === moduleName;\n    });\n\n    return {\n      key: moduleName,\n      bindings: nodes\n    };\n  }\n\n  getScope(component: string, scope: string): Scope {\n    const nodes = Object.values(this.nodeMap[component]).filter((node: Node) => {\n      return node.scope === scope;\n    });\n\n    return {\n      scope: scope,\n      bindings: nodes\n    };\n  }\n\n  getCallsites(componentName: string, node: string): Node[] {\n    return (this.callsitesMap[componentName][node] || []).map((binding: Node) => {\n      const reference = this.getNode(componentName, binding.key);\n      if (!reference) {\n        return binding;\n      }\n\n      const referenceNode = reference.dependencies.find(d => d.key === node);\n\n      if (!referenceNode) {\n        return binding;\n      }\n\n      return {\n        ...binding,\n        kind: referenceNode.kind\n      };\n    });\n  }\n\n  getSubcomponentWeight(subcomponent: string): Weight {\n    return this.subcomponentWeights[subcomponent];\n  }\n\n  getSubcomponentBindings(component: string, subcomponent: string): Node[] {\n    return Object.values(this.nodeMap[component]).filter((node: Node) => {\n      return node.component === subcomponent\n    });\n  }\n\n  computeNodeWeight(componentName: string, key: string, graphReducer: GraphReducer): Weight {\n    const node = this.getNode(componentName, key);\n    if (node) {\n      return this.computeWeightForNodes(componentName, [node], graphReducer);\n    }\n    return graphReducer.result();\n  }\n\n  /** Computes weight for a list of nodes, aggregating and returning result from graph reducer. */\n  computeWeightForNodes(componentName: string, queue: Node[], graphReducer: GraphReducer): Weight {\n    const visited: { [key: string]: boolean } = {};\n    while (queue.length) {\n      const queueNode = queue.shift();\n\n      // TODO: This can be undefined due to bad shouldSkipNode logic\n      if (!queueNode) {\n        continue;\n      }\n\n      graphReducer.reduce(queueNode.key);\n      visited[queueNode.key] = true;\n\n      for (const dependency of queueNode.dependencies) {\n        if (visited[dependency.key]) {\n          continue;\n        } else if (this.shouldSkipWeight(componentName, dependency.key)) {\n          visited[dependency.key] = true;\n          continue;\n        }\n\n        graphReducer.reduce(dependency.key);\n\n        const node = this.getNode(componentName, dependency.key);\n        if (node) {\n          queue.push(node);\n        }\n        visited[dependency.key] = true;\n      }\n    }\n\n    return graphReducer.result();\n  }\n\n  private shouldSkipWeight(componentName: string, dependencyKey: string): boolean | undefined {\n    const bindingInComponent = this.getNode(componentName, dependencyKey);\n    return (\n      bindingInComponent && bindingInComponent.kind === \"MEMBERS_INJECTION\"\n    );\n  }\n\n  private populateCaches() {\n    // Store all nodes under `ALL_COMPONENTS` key for universal search\n    this.nodeMap[ALL_COMPONENTS] = {};\n    this.callsitesMap[ALL_COMPONENTS] = {};\n\n    // traverse the components\n    for (const component of this.componentSet.components) {\n      this.nodeMap[component.name] = {};\n      this.callsitesMap[component.name] = {};\n      this.componentMap[component.name] = component;\n\n      // TODO: should avoid modifying the components\n      component.nodes = component.nodes.filter(node => !this.shouldSkipNode(node));\n\n      for (const node of component.nodes) {\n        this.nodeMap[component.name][node.key] = node;\n        this.nodeMap[ALL_COMPONENTS][node.key] = node;\n\n        // populate subcomponent weight\n        if (node.component && node.component != component.name) {\n          let subcomponent = node.component;\n          if (!this.subcomponentWeights[subcomponent]) {\n            this.subcomponentWeights[subcomponent] = {\n              value: 0,\n              smallThreshold: SUBCOMPONENT_SMALL_THRESHOLD,\n              largeThreshold: SUBCOMPONENT_LARGE_THRESHOLD\n            } as Weight;\n          }\n          this.subcomponentWeights[subcomponent].value++;\n        }\n\n        for (const dep of node.dependencies) {\n          if (!this.callsitesMap[component.name][dep.key]) {\n            this.callsitesMap[component.name][dep.key] = [];\n          }\n          if (!this.callsitesMap[ALL_COMPONENTS][dep.key]) {\n            this.callsitesMap[ALL_COMPONENTS][dep.key] = [];\n          }\n\n          this.callsitesMap[component.name][dep.key].push(node);\n          this.callsitesMap[ALL_COMPONENTS][dep.key].push(node);\n        }\n      }\n    }\n  }\n\n  private shouldSkipNode(node: Node): boolean {\n    return node.kind === \"BOUND_INSTANCE\";\n  }\n}\n","import React from \"react\";\nimport GraphManager from \"../models/GraphManager\";\nimport { ALL_COMPONENTS } from \"../models/GraphManager\";\nimport { useHistory } from \"react-router-dom\";\nimport NodeLink from \"./NodeLink\";\nimport Routes from \"src/Routes\";\nimport WeightService from \"../service/WeightService\";\n\nexport type Props = {\n  graphManager: GraphManager;\n  weightService: WeightService;\n  componentName: string;\n  moduleName: string;\n};\n\nexport function ModuleSummary({ componentName, moduleName, graphManager, weightService }: Props) {\n  const graphModule = graphManager.getModule(componentName, moduleName);\n  const history = useHistory();\n\n  if (!graphModule) {\n    return (\n      <div>\n        Cannot find ${graphModule} module in ${componentName} graph\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"card-title\">\n          Module: {graphModule.key}\n        </div>\n\n        <h6>Bindings</h6>\n        {graphModule.bindings.map(node => {\n          return (\n            <NodeLink\n              key={node!.key}\n              weight={weightService.getWeight(ALL_COMPONENTS, node!.key)}\n              scoped={true}\n              node={node!}\n              onSelect={node => {\n                history.push(Routes.GraphNode(componentName, node));\n              }}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import Select from \"react-select\";\nimport React from \"react\";\nimport { ValueType, OptionTypeBase } from \"react-select/src/types\";\n\ninterface Props {\n  componentName: string;\n  graphs: String[];\n  selectGraph: (componentName: string) => any;\n}\n\nfunction displayName(component: string): string {\n  var pos = component.lastIndexOf('.')\n  if (pos === -1) {\n    return component\n  }\n  return component.substring(pos+1)\n}\n\n/**\n * Component Selector\n * If no component is specified `All Components` will be picked\n */\nexport const GraphSelector = ({\n  componentName,\n  graphs,\n  selectGraph\n}: Props) => {\n  let graphOptions = graphs.map(graph => {\n    return { value: graph, label: displayName(graph.toString()) };\n  });\n\n  let defaultValue = componentName\n    ? ({ value: componentName, label: displayName(componentName) } as ValueType<OptionTypeBase>)\n    : graphOptions[0];\n\n  return (\n    <Select\n      value={defaultValue}\n      className=\"component-select\"\n      classNamePrefix=\"react-select\"\n      onChange={value => selectGraph((value as { value: string }).value)}\n      placeholder=\"Select graph...\"\n      options={graphOptions}\n    />\n  );\n};\n","import React from \"react\";\nimport GraphManager from \"../models/GraphManager\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport NodeLink from \"./NodeLink\";\nimport Routes from \"src/Routes\";\nimport { GraphSelector } from \"./GraphSelector\";\nimport WeightService from \"../service/WeightService\";\n\nexport type Props = {\n  graphManager: GraphManager;\n  weightService: WeightService;\n  componentName: string;\n  nodeName: string;\n};\n\nexport function NodeSummary({ graphManager, weightService, componentName, nodeName }: Props) {\n  const history = useHistory();\n  const node = graphManager.getNode(componentName, nodeName);\n\n  if (!node) {\n    return (\n      <div>\n      Cannot find <strong>{nodeName}</strong> node in <strong>{componentName}</strong> graph\n      </div>\n    );\n  }\n\n  const bindingModule = node.module;\n\n  const availableGraphs = graphManager.getMatches(\"\", node.key, 40, true).map(it => it.componentName)\n\n  const callsites = graphManager.getCallsites(componentName, node.key);\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"card-title\">\n          <NodeLink\n              node={node}\n              weight={weightService.getWeight(componentName, node.key)}\n          />\n        </div>\n        <p>\n          <span className=\"unselectable\">Component: </span>\n          <GraphSelector\n              componentName={componentName}\n              graphs={availableGraphs}\n              selectGraph={graph => history.push(Routes.GraphNode(graph, node.key))}\n          />\n        </p>\n\n\n        {node.component && (componentName !== node.component) && (\n        <p>\n        <span className=\"unselectable\">Subcomponent: </span>\n        <Link\n                className=\"soft-link\"\n                to={Routes.SubComponent(componentName, node.component)}\n              >\n                {node.component}\n              </Link>\n        </p>\n        )}\n\n\n        {node.scope && (\n          <p>\n            <span className=\"unselectable\">Scope: </span>\n            <Link\n                className=\"soft-link\"\n                to={Routes.GraphScope(componentName, node.scope)}\n              >\n                {node.scope}\n              </Link>\n          </p>\n        )}\n\n        {node.module && (\n          <p>\n            <span className=\"unselectable\">Module: </span>\n            {bindingModule ? (\n              <Link\n                className=\"soft-link\"\n                to={Routes.GraphModule(componentName, node.module)}\n              >\n                {bindingModule}\n              </Link>\n            ) : (\n              <span>n/a</span>\n            )}\n          </p>\n        )}\n        <br />\n        <h6>Dependencies\n          &nbsp;|&nbsp;\n          <Link\n            className=\"soft-link\"\n            to={Routes.GraphClosure(componentName, node.key)}\n          >\n          transitive\n          </Link>\n        </h6>\n        {node &&\n          node.dependencies\n            .map(d => ({\n              node: graphManager.getNode(componentName, d.key),\n              dep: d\n            }))\n            .filter(({ node }) => node !== undefined)\n            .map(({ node, dep }) => {\n              return (\n                <NodeLink\n                  key={node!.key}\n                  weight={weightService.getWeight(componentName, node!.key)}\n                  kind={dep.kind}\n                  scoped={true}\n                  node={node!}\n                  onSelect={node =>\n                    history.push(Routes.GraphNode(componentName, node))\n                  }\n                />\n              );\n            })}\n        {!node || (node.dependencies.length === 0 && <div>None</div>)}\n        <br />\n        <h6>Callsites</h6>\n        {callsites.map(binding => {\n          return (\n            <NodeLink\n              key={binding.key}\n              node={binding}\n              kind={binding.kind}\n              scoped={true}\n              onSelect={node => history.push(Routes.GraphNode(componentName, node))}\n            />\n          );\n        })}\n        {callsites.length === 0 && <div>None</div>}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport GraphManager from \"../models/GraphManager\";\nimport { ALL_COMPONENTS } from \"../models/GraphManager\";\nimport { useHistory } from \"react-router-dom\";\nimport NodeLink from \"./NodeLink\";\nimport WeightService from \"../service/WeightService\";\n\nexport type Props = {\n  graphManager: GraphManager;\n  weightService: WeightService;\n  componentName: string;\n  scope: string;\n};\n\nexport function ScopeSummary({ graphManager, weightService, componentName, scope }: Props) {\n  const graphScope = graphManager.getScope(componentName, scope);\n  const history = useHistory();\n\n  if (!graphScope) {\n    return (\n      <div>\n        Cannot find ${graphScope} module in ${componentName} graph\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"card-title\">\n          Scope\n          <br />\n          {graphScope.scope}\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col s12\">\n            <h6>Bindings ({graphScope.bindings.length})</h6>\n            {graphScope.bindings.map(node => {\n              return (\n                <NodeLink\n                  key={node.key}\n                  weight={weightService.getWeight(ALL_COMPONENTS, node.key)}\n                  scoped={true}\n                  node={node}\n                  onSelect={node => {\n                    history.push(`/${componentName}/node/${node}`);\n                  }}\n                />\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Node } from \"../models/Graph\";\nimport GraphManager from \"../models/GraphManager\";\nimport Routes from \"src/Routes\";\nimport NodeLink from \"./NodeLink\";\n\nconst NO_SCOPE = \"@\"\n\ntype Props = {\n  graphManager: GraphManager,\n  componentName: string,\n  nodeName: string;\n};\n\ntype Dependencies = {\n  bindings: { [key:string]:Node[]; }\n  modules: { [key:string]:Node[]; }\n  moduleSummary: { [key:string]:number; }\n}\n\nexport default function NodeClosure({ graphManager, componentName, nodeName }: Props) {\n\n  const dependencies = getDependencies(graphManager, componentName, nodeName);\n\n  const scopedDependencies = Object.keys(dependencies.bindings).filter((scope: string) => {\n    return scope != NO_SCOPE && scope != \"@dagger.Reusable\"\n  });\n\n  const modules = Object.keys(dependencies.modules);\n\n  const history = useHistory();\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"card-title\">\n          Transitive Dependencies: {nodeName}\n        </div>      \n\n        {scopedDependencies.length > 0 && (\n          <div>\n            <br/>\n            <h6>Scoped Bindings</h6>\n            { scopedDependencies.map((scope: string) => {\n              return (<div>\n                <p>{getScopeDisplayName(scope)}</p>\n                {dependencies.bindings[scope].map((binding: Node) => {\n                return (\n                  <div>{binding.key}</div>\n                )  \n              })}</div>)\n            })}\n          </div>\n        )}\n\n        {modules.length > 0 && (\n          <div>\n            <br/>\n            <h6>Module Bindings</h6>\n            { modules.map((module: string) => {\n              return (\n                <div>\n                  <div>\n                    <Link className=\"soft-link\" to={Routes.GraphModule(componentName, module)}>\n                      {getModuleDisplayName(module)}\n                    </Link>\n                    &nbsp;\n                    (\n                    {dependencies.modules[module].length}\n                    /\n                    {dependencies.moduleSummary[module]}\n                    )\n                  </div>\n                  {dependencies.modules[module].map((binding: Node) => {\n                    return (\n                      <NodeLink\n                        key={binding.key}\n                        node={binding}\n                        kind={binding.kind}\n                        scoped={true}\n                        onSelect={node => history.push(Routes.GraphNode(componentName, binding.key))}\n                      />\n                    );  \n                  })}\n                </div>\n              )\n            })}\n          </div>\n        )}          \n      </div>\n    </div>\n  );\n}\n\nfunction getDependencies(graphManager: GraphManager, componentName: string, nodeName: string): Dependencies {\n  const visited: { [key:string]:boolean; } = {}\n  const queue: string[] = [nodeName]\n\n  const bindings: { [key:string]:Node[]; } = {}\n  const moduleBindings: { [key:string]:Node[]; } = {}\n  const moduleSummary: { [key:string]:number } = {}\n\n\n  // Module overviews\n  graphManager.getComponent(componentName).nodes.forEach(node => {\n    const module = node.module\n    if (module) {\n      moduleSummary[module] = (moduleSummary[module] || 0) + 1\n    }\n  })\n\n  while (queue.length != 0) {\n    const bindingKey = queue.shift()\n\n    if (!bindingKey || visited[bindingKey]) {\n      continue;\n    }\n    visited[bindingKey] = true\n    \n    const binding = graphManager.getNode(componentName, bindingKey)\n    if (binding) {\n      // Add this binding to our output\n      if (binding.module) {\n        var mb = moduleBindings[binding.module] || (moduleBindings[binding.module] = [])\n        mb.push(binding)\n      } else {\n        var sb = bindings[binding.scope || NO_SCOPE] || (bindings[binding.scope || NO_SCOPE] = [])\n        sb.push(binding)\n      }\n      \n      // Crawl binding dependencies\n      binding.dependencies.forEach(dep => {\n        queue.push(dep.key)\n      })\n    }\n  }\n\n  return {\n    bindings: bindings,\n    modules: moduleBindings,\n    moduleSummary: moduleSummary\n  }\n}\n\nfunction getScopeDisplayName(scope: string): string {\n  const idx = scope.lastIndexOf(\".\")\n  if (idx === -1) {\n    return scope\n  }\n  return \"@\" + scope.substring(idx + 1)\n}\n\nfunction getModuleDisplayName(module: string): string {\n  const parts = module.split(\".\")\n  if (parts.length == 0) {\n    return module\n  }\n  var i = 0\n  while (i < parts.length && parts[i][0] !== parts[i][0].toUpperCase()) {\n    i++;\n  }\n  if (i < parts.length) {\n    return parts.slice(i, parts.length).join(\".\")\n  }\n  return module\n}\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Routes from \"src/Routes\";\nimport GraphManager from \"../models/GraphManager\";\nimport NodeLink from \"./NodeLink\";\nimport WeightService from \"../service/WeightService\";\n\ntype Props = {\n    graphManager: GraphManager;\n    subcomponentName: string;\n    componentName: string;\n    weightService: WeightService;\n  };\n\n\nconst SubcomponentSummary = ({ graphManager, subcomponentName, componentName, weightService}: Props) => {\n    const totalBinds = graphManager.getSubcomponentBindings(componentName, subcomponentName)\n    const history = useHistory();\n    totalBinds.sort((nodeA, nodeB) => {\n        const weightA = weightService.getWeight(componentName, nodeA.key);\n        const weightB = weightService.getWeight(componentName, nodeB.key);\n        return (weightB ? weightB.value : 0) - (weightA ? weightA.value : 0)\n    });\n\n    return (\n      <div className=\"card\">\n        <div className=\"card-content\">\n          <div className=\"card-title\">{subcomponentName}</div>\n          <div>{totalBinds.length} total bindings.</div>\n\n          <div>\n          {totalBinds.map(binding => {\n            return (\n              <NodeLink\n                key={binding.key}\n                weight={weightService.getWeight(componentName, binding.key)}\n                kind={binding.kind}\n                scoped={true}\n                node={binding}\n                onSelect={node => history.push(Routes.GraphNode(componentName, binding.key))}\n              />\n            );\n          })}\n          </div>\n\n        </div>\n      </div>\n    );\n};\n\nexport default SubcomponentSummary;\n","import React from \"react\";\nimport Select from \"react-select\";\nimport WeightServiceManager from \"../service/WeightServiceManager\";\n\ninterface Props {\n  weightServiceManager: WeightServiceManager;\n  onSelectWeight: (weight: string) => any;\n}\n\n/** Dropdown for selecting the metric for node weights. */\nexport default class WeightSelector extends React.Component<Props> {\n\n  metricOptions: Array<{ label: string, value: string }>;\n\n  constructor(props: Props) {\n    super(props);\n    this.metricOptions = this.props.weightServiceManager.getWeightServiceNames().map(name => {\n      return { label: name.charAt(0).toUpperCase() + name.slice(1), value: name };\n    });\n    this.state = this.metricOptions[0];\n  }\n\n  render() {\n    return (\n      <Select\n          className=\"component-select weight-select\"\n          classNamePrefix=\"react-select\"\n          value={this.state}\n          onChange={selectedOption => {\n              const option = selectedOption as { value: string };\n              this.setState(option);\n              this.props.onSelectWeight(option.value);\n            }\n          }\n          options={this.metricOptions}\n      />\n    );\n  }\n}","import React, { useMemo } from \"react\";\nimport GraphManager from \"../models/GraphManager\";\nimport { useHistory, Route, Switch } from \"react-router\";\nimport ComponentSummary from \"./ComponentSummary\";\nimport NodeAutosuggest from \"./NodeAutosuggest\";\nimport { BrowserHeader } from \"./BrowserHeader\";\nimport Home from \"src/components/Home\";\nimport { ModuleSummary } from \"src/components/ModuleSummary\";\nimport { NodeSummary } from \"src/components/NodeSummary\";\nimport { ScopeSummary } from \"./ScopeSummary\";\nimport NodeClosure from \"src/components/NodeClosure\";\nimport SubcomponentSummary from \"src/components/SubcomponentSummary\";\nimport WeightSelector from \"../components/WeightSelector\";\nimport Routes, { Paths } from \"src/Routes\";\nimport WeightServiceManager from \"../service/WeightServiceManager\";\nimport classNames from \"classnames\";\nimport \"./GraphBrowser.css\";\n\ninterface Props {\n  graphManager: GraphManager;\n  weightServiceManager: WeightServiceManager;\n  componentName: string;\n}\n\nexport const GraphBrowser = ({ graphManager, weightServiceManager, componentName }: Props) => {\n  const graph = useMemo(() => componentName && graphManager.getComponent(componentName), [\n    graphManager,\n    componentName\n  ]);\n\n  const history = useHistory();\n\n  const weightService = weightServiceManager.getWeightService();\n\n  const includeWeightSelector = weightServiceManager.getWeightServiceNames().length > 1;\n\n  return (\n    <div>\n      <BrowserHeader weightServiceManager={weightServiceManager} />\n      <div className=\"container\">\n        <div className=\"row search-bar\">\n          <div className={classNames(\"col\", includeWeightSelector ? \"s9\": \"s12\")}>\n            <NodeAutosuggest\n              graphManager={graphManager}\n              weightService={weightService}\n              componentName={graph && graph.name}\n              onSelect={(componentName, node) =>\n                history.push(Routes.GraphNode(componentName || \"\", node))\n              }\n            />\n          </div>\n          {includeWeightSelector &&\n            <div className=\"col s3\">\n              <WeightSelector\n                  weightServiceManager={weightServiceManager}\n                  onSelectWeight={weight => {\n                    weightServiceManager.selectWeightService(weight);\n                    // Refresh the app state without affecting history.\n                    history.replace('#');\n                  }\n                }\n              />\n            </div>\n          }\n        </div>\n        <Switch>\n          <Route\n            path={Paths.Module}\n            render={props => (\n              <ModuleSummary\n                graphManager={graphManager}\n                weightService={weightService}\n                moduleName={decodeURIComponent(props.match.params.module)}\n                componentName={componentName}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.GraphModule}\n            render={props => (\n              <ModuleSummary\n                graphManager={graphManager}\n                weightService={weightService}\n                moduleName={decodeURIComponent(props.match.params.module)}\n                componentName={componentName}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.GraphScope}\n            render={props => (\n              <ScopeSummary\n                graphManager={graphManager}\n                weightService={weightService}\n                scope={decodeURIComponent(props.match.params.scope)}\n                componentName={componentName}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.GraphClosure}\n            render={props => (\n              <NodeClosure\n                graphManager={graphManager}\n                nodeName={decodeURIComponent(props.match.params.key)}\n                componentName={componentName}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.GraphNode}\n            render={props => (\n              <NodeSummary\n                graphManager={graphManager}\n                weightService={weightService}\n                nodeName={decodeURIComponent(props.match.params.node)}\n                componentName={componentName}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.SubComponent}\n            render={props => (\n              <SubcomponentSummary\n                graphManager={graphManager}\n                subcomponentName={decodeURIComponent(props.match.params.subcomponent)}\n                componentName={componentName}\n                weightService={weightService}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.Component}\n            render={props => (\n              <ComponentSummary\n                componentName={decodeURIComponent(props.match.params.component)}\n                graphManager={graphManager}\n                weightService={weightService}\n                onSelect={(componentName, node) =>\n                  history.push(Routes.GraphNode(componentName || \"\", node))\n                }\n              />\n            )}\n          ></Route>\n          <Route\n            path=\"\"\n            render={props => (\n              <Home\n                graphManager={graphManager}\n                weightServiceManager={weightServiceManager}\n              />\n            )}\n          ></Route>\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nexport default GraphBrowser;\n","import GraphManager from \"../models/GraphManager\";\nimport GraphReducer from \"../models/GraphReducer\";\nimport { Weight } from \"../models/Graph\";\nimport WeightService from \"./WeightService\";\n\nconst LARGE_THRESHOLD = 500;\nconst SMALL_THRESHOLD = 10;\n\n/** Service that computes the number of bindings for a given component and node. */\nexport default class BindingsService implements WeightService {\n\n  private nodeWeights: { [componentName: string]: { [key: string]: Weight } };\n  private graphManager: GraphManager;\n\n  constructor(graphManager: GraphManager) {\n    this.graphManager = graphManager;\n    this.nodeWeights = {};\n  }\n\n  getWeight(componentName: string, node?: string): Weight | undefined {\n    if (node) {\n      if (!this.nodeWeights[componentName]) {\n        this.nodeWeights[componentName] = {};\n      }\n      if (!this.nodeWeights[componentName][node]) {\n        this.nodeWeights[componentName][node] =\n            this.graphManager.computeNodeWeight(componentName, node, new GraphReducerImpl());\n      }\n      return this.nodeWeights[componentName][node];\n    } else {\n      return {\n        value: this.graphManager.getComponent(componentName).nodes.length,\n        largeThreshold: LARGE_THRESHOLD,\n        smallThreshold: SMALL_THRESHOLD\n      } as Weight;\n    }\n  }\n}\n\nclass GraphReducerImpl implements GraphReducer {\n  weight: Weight;\n\n  constructor() {\n    this.weight = {\n      value: 0,\n      largeThreshold: LARGE_THRESHOLD,\n      smallThreshold: SMALL_THRESHOLD\n    } as Weight;\n  }\n\n  reduce(key: string) {\n    this.weight.value++;\n  }\n\n  result(): Weight {\n    return this.weight;\n  }\n}\n","const METHOD_SIZE_BYTES = 60;\nconst FIELD_SIZE_BYTES = 30;\n\n/** Stores class information from ApkAnalyzer output. */\nexport type ClassInfo = {\n  method_count: number;\n  lambda_count?: number; // temporarily optional for backward compatibility\n  field_count: number;\n  size: number;\n  inner_class_count?: number; // temporarily optional for backward compatibility\n}\n\n/** Convenience class to output summary and memory based on class information. */\nexport default class ClassSize {\n  classInfo: ClassInfo;\n\n  constructor(classInfo: ClassInfo) {\n    this.classInfo = classInfo;\n  }\n\n  /** Returns the class info as a single string, useful for popups or title/alt attributes. */\n  getSummary(): string {\n    let size = this.classInfo.size;\n    let unit = 'B';\n    if (size >= 1024) {\n      size = Math.round(size / 1024);\n      unit = 'kB';\n    }\n    return `dex size: ${size} ${unit}` +\n        `\\nmethods: ${this.classInfo.method_count}` +\n        (this.classInfo.lambda_count ? `\\nlambdas: ${this.classInfo.lambda_count}` : ``) +\n        `\\nfields: ${this.classInfo.field_count}` +\n        (this.classInfo.inner_class_count ? `\\ninner classes: ${this.classInfo.inner_class_count}` : ``);\n  }\n\n  /** Returns estimated memory size in bytes. */\n  getMemorySize(): number {\n    return this.classInfo.size + this.classInfo.method_count * METHOD_SIZE_BYTES + this.classInfo.field_count * FIELD_SIZE_BYTES;\n  }\n\n  add(classSize: ClassSize) {\n    this.classInfo.method_count += classSize.classInfo.method_count;\n    if (classSize.classInfo.lambda_count) {\n      const count = this.classInfo.lambda_count || 0;\n      this.classInfo.lambda_count = count + classSize.classInfo.lambda_count;\n    }\n    this.classInfo.field_count += classSize.classInfo.field_count;\n    this.classInfo.size += classSize.classInfo.size;\n    if (classSize.classInfo.inner_class_count) {\n      const count = this.classInfo.inner_class_count || 0;\n      this.classInfo.inner_class_count = count + classSize.classInfo.inner_class_count;\n    }\n  }\n}\n","import ClassSize, { ClassInfo } from \"../models/ClassSize\";\nimport { Weight } from \"../models/Graph\";\nimport WeightService from \"./WeightService\";\n\nconst LARGE_THRESHOLD_KB = 20; // Nodes over 10KB are considered \"large\"\nconst SMALL_THRESHOLD_KB = 3; // Nodes less than 3KB are considered \"small\"\n\n/**\n * Service to get class size for a given class name.\n */\nexport default class ClassSizeService implements WeightService {\n  /** Class information - method/field count and dex size - stored per fully qualified class name. */\n  classInfo: { [key: string]: ClassInfo };\n\n  constructor(classInfo: { [key: string]: ClassInfo }) {\n    this.classInfo = classInfo;\n  }\n\n  getWeight(componentName: string, node?: string): Weight | undefined {\n    // TODO: add ability to compute the weight for the whole component\n    const classSize = node ? this.getClassSize(node) : 0;\n    if (classSize) {\n      return {\n        value: Math.round(classSize.getMemorySize() / 1024),\n        largeThreshold: LARGE_THRESHOLD_KB,\n        smallThreshold: SMALL_THRESHOLD_KB,\n        summary: classSize.getSummary(),\n        unit: 'kB'\n      } as Weight;\n    }\n  }\n\n  getClassSize(className: string): ClassSize | undefined {\n    const info = this.classInfo[className];\n    if (info) {\n      return new ClassSize(info);\n    }\n  }\n}\n","import ClassSize, { ClassInfo } from \"../models/ClassSize\";\nimport GraphManager from \"../models/GraphManager\";\nimport GraphReducer from \"../models/GraphReducer\";\nimport { Weight } from \"../models/Graph\";\nimport ClassSizeService  from \"./ClassSizeService\";\nimport WeightService from \"./WeightService\";\n\nconst LARGE_THRESHOLD_KB = 1000; // Nodes over 1MB are considered \"large\"\nconst SMALL_THRESHOLD_KB = 50; // Nodes less than 50KB are considered \"small\"\n\n/**\n * Service to compute the graph weight in terms of memory.\n * This is based on transitive dependencies per node and on the methods, fields, and dex code size.\n */\nexport default class GraphSizeService implements WeightService {\n\n  private nodeWeights: { [componentName: string]: { [key: string]: Weight } };\n  private graphManager: GraphManager;\n  private classSizeService: ClassSizeService;\n\n  constructor(graphManager: GraphManager, classSizeService: ClassSizeService) {\n    this.graphManager = graphManager;\n    this.classSizeService = classSizeService;\n    this.nodeWeights = {};\n  }\n\n  getWeight(componentName: string, node?: string): Weight | undefined {\n    if (!this.nodeWeights[componentName]) {\n      this.nodeWeights[componentName] = {};\n    }\n\n    if (node) {\n      if (!this.nodeWeights[componentName][node]) {\n        const graphReducer = new GraphReducerImpl(this.classSizeService, node);\n        this.nodeWeights[componentName][node] =\n            this.graphManager.computeNodeWeight(componentName, node, graphReducer);\n      }\n      return this.nodeWeights[componentName][node];\n    } else {\n      if (!this.nodeWeights[componentName][componentName]) {\n        const nodes = Object.assign([], this.graphManager.getComponent(componentName).nodes);\n        const graphReducer = new GraphReducerImpl(this.classSizeService, componentName);\n        this.nodeWeights[componentName][componentName] =\n            this.graphManager.computeWeightForNodes(componentName, nodes, graphReducer);\n      }\n      return this.nodeWeights[componentName][componentName];\n    }\n  }\n}\n\nclass GraphReducerImpl implements GraphReducer {\n  private classSize: ClassSize;\n  private classSizeService: ClassSizeService;\n\n  /**\n   * Tracks nodes that have already been reduced. This is necessary to count Dagger modules\n   * just once. They may be a common dependency and counted multiple times.\n   */\n  private reduced: Set<string>;\n\n  constructor(classSizeService: ClassSizeService, initialKey: string) {\n    this.classSizeService = classSizeService;\n    this.reduced = new Set();\n\n    const classInfo = {\n      'field_count': 0,\n      'method_count': 0,\n      'lambda_count': 0,\n      'size': 0,\n      'inner_class_count': 0\n    } as ClassInfo;\n    this.classSize = new ClassSize(classInfo);\n    const parentClassSize = this.classSizeService.getClassSize(initialKey);\n    if (parentClassSize) {\n      this.classSize.add(parentClassSize);\n    }\n  }\n\n  reduce(key: string) {\n    if (this.reduced.has(key)) {\n      return;\n    }\n\n    this.reduced.add(key);\n    const childClassSize = this.classSizeService.getClassSize(key);\n    if (childClassSize) {\n      this.classSize.add(childClassSize);\n    }\n  }\n\n  result(): Weight {\n    return {\n      value: Math.round(this.classSize.getMemorySize() / 1024),\n      largeThreshold: LARGE_THRESHOLD_KB,\n      smallThreshold: SMALL_THRESHOLD_KB,\n      summary: this.classSize.getSummary(),\n      unit: 'kB'\n    } as Weight;\n  }\n}","import GraphManager from \"../models/GraphManager\";\nimport BindingsService from \"./BindingsService\";\nimport ClassSizeService from \"./ClassSizeService\";\nimport GraphSizeService from \"./GraphSizeService\";\nimport WeightService from \"./WeightService\";\n\n/** Manages currently selected weight service. */\nexport default class WeightServiceManager {\n\n  private weightServices: { [key: string]: WeightService };\n  private weightService: WeightService;\n\n  constructor(graphManager: GraphManager) {\n    // Add bindings count as the default service.\n    this.weightServices = {};\n    this.weightService = this.weightServices['bindings'] = new BindingsService(graphManager);\n\n    // TODO: Separate services into a config file.\n    if (graphManager.classInfo && Object.keys(graphManager.classInfo).length) { \n      const classSizeService = new ClassSizeService(graphManager.classInfo);\n      this.weightServices['class memory'] = classSizeService;\n      this.weightServices['graph memory'] = new GraphSizeService(graphManager, classSizeService);\n    }\n  }\n\n  getWeightServiceNames(): Array<string> {\n    return Object.keys(this.weightServices).sort();\n  }\n\n  getWeightService(): WeightService {\n    return this.weightService;\n  }\n\n  selectWeightService(weight: string) {\n    this.weightService = this.weightServices[weight];\n  }\n}","import React from \"react\";\nimport DaggerBrowser from \"./components/GraphBrowser\";\nimport { Route, HashRouter } from \"react-router-dom\";\nimport GraphManager from \"./models/GraphManager\";\nimport { QueryParamProvider } from \"use-query-params\";\nimport { Paths } from \"./Routes\";\nimport WeightServiceManager from \"./service/WeightServiceManager\";\n\nconst graphManager = new GraphManager();\n\ninterface AppState {\n  loaded?: boolean\n}\n\nclass App extends React.Component<any, AppState> {\n  weightServiceManager?: WeightServiceManager;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    const loaded = await graphManager.load();\n    if (loaded) {\n      this.weightServiceManager = new WeightServiceManager(graphManager);\n    }\n    this.setState({\n      loaded: loaded\n    })\n  }\n\n  render() {\n    if (this.state.loaded) {\n      return (\n        <HashRouter>\n          <QueryParamProvider ReactRouterRoute={Route}>\n            <Route\n              path={Paths.Home}\n              render={props => (\n                <DaggerBrowser\n                  componentName={props.match.params.component ? decodeURIComponent(props.match.params.component) : \"\"}\n                  graphManager={graphManager}\n                  weightServiceManager={this.weightServiceManager!!}\n                />\n              )}\n            />\n          </QueryParamProvider>\n        </HashRouter>\n      );\n    } else {\n      return \"\";\n    }\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}