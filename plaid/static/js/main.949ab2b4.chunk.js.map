{"version":3,"sources":["Routes.tsx","models/Config.tsx","components/CodeLink.tsx","components/NodeIcon.tsx","components/NodeWeight.tsx","components/NodeLink.tsx","components/SubcomponentLink.tsx","components/ComponentLink.tsx","components/ComponentSummary.tsx","components/NodeAutosuggest.tsx","components/Home.tsx","models/GraphManager.tsx","components/ModuleSummary.tsx","components/GraphSelector.tsx","components/NodeSummary.tsx","components/ScopeSummary.tsx","components/NodeClosure.tsx","components/SubcomponentSummary.tsx","components/WeightSelector.tsx","components/GraphBrowser.tsx","components/Spinner.tsx","components/LoadManifestModal.tsx","components/GraphBrowserLoader.tsx","service/BindingsService.tsx","models/ClassSize.tsx","service/ClassSizeService.tsx","service/GraphSizeService.tsx","service/WeightServiceManager.tsx","components/BrowserHeader.tsx","components/FileDropzone.tsx","App.tsx","index.tsx"],"names":["Paths","Home","Component","Module","GraphModule","GraphScope","GraphNode","GraphClosure","SubComponent","Routes","component","encodeURIComponent","module","node","scope","key","subcomponent","TITLE","data","title","REPO_URL","repo_url","PUBLIC_URL","process","COMPONENTS_MANIFEST_JSON_URL","CodeLink","link","Config","filename","split","pop","rel","target","href","className","getNodeIcon","kind","label","color","NodeIcon","icon","classNames","getWeightColor","weight","value","largeThreshold","smallThreshold","NodeWeight","summary","Number","isInteger","toFixed","unit","NodeLink","onSelect","undefined","scoped","onClick","replace","SubcomponentLink","subcomponentName","index","lastIndexOf","substring","getDisplayName","ComponentLink","componentName","to","ComponentSummary","graphManager","weightService","graph","getComponent","history","useHistory","scopedBindings","nodes","filter","binding","componentSet","Set","forEach","add","membersInjectors","multiBindings","sort","nodeA","nodeB","weightA","getWeight","weightB","length","map","size","Array","from","getSubcomponentWeight","push","MAX_SUGGESTIONS","NodeAutosuggest","useState","query","setQuery","searchRef","useRef","suggestions","useMemo","getMatches","trim","toLowerCase","getSuggestions","autoFocusInput","event","metaKey","current","input","focus","useEffect","window","addEventListener","removeEventListener","ref","onSuggestionsFetchRequested","onSuggestionsClearRequested","onSuggestionSelected","_","suggestion","getSuggestionValue","renderSuggestion","inputProps","placeholder","onChange","params","newValue","weightServiceManager","components","getWeightService","name","ALL_COMPONENTS","GraphManager","manifestUrl","classInfoUrl","classInfo","nodeMap","componentMap","subcomponentWeights","callsitesMap","axios","get","classInfoResponse","this","manifestResponse","populateCaches","manifestFile","readFileAsync","JSON","parse","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsText","max","strictMatch","matches","includes","Error","moduleName","Object","values","bindings","reference","getNode","referenceNode","dependencies","find","d","graphReducer","computeWeightForNodes","queue","visited","queueNode","shift","reduce","dependency","shouldSkipWeight","dependencyKey","bindingInComponent","shouldSkipNode","dep","ModuleSummary","graphModule","getModule","displayName","pos","GraphSelector","graphs","selectGraph","graphOptions","toString","defaultValue","classNamePrefix","options","NodeSummary","nodeName","bindingModule","availableGraphs","it","callsites","getCallsites","bindingKind","readableKind","componentSimpleName","simpleScope","createdComponentKey","adjacentNodes","nodeKey","componentNode","createdComponent","ScopeSummary","graphScope","getScope","NO_SCOPE","NodeClosure","moduleBindings","moduleSummary","bindingKey","modules","getDependencies","scopedDependencies","keys","idx","getScopeDisplayName","parts","i","toUpperCase","slice","join","getModuleDisplayName","SubcomponentSummary","totalBinds","getSubcomponentBindings","WeightSelector","props","metricOptions","getWeightServiceNames","charAt","state","selectedOption","option","setState","onSelectWeight","React","GraphBrowser","includeWeightSelector","selectWeightService","path","render","decodeURIComponent","match","GraphSpinner","spinnerColor","spinnerWidth","visible","LoadManifestModal","trigger","onChangeManifestUrl","inputRef","actions","flat","modal","waves","bottomSheet","fixedFooter","header","id","dismissible","endingTop","inDuration","onCloseEnd","onCloseStart","onOpenEnd","onOpenStart","opacity","outDuration","preventScrolling","startingTop","type","onKeyDown","ev","keyCode","GraphBrowserLoader","loaded","Spinner","LARGE_THRESHOLD","SMALL_THRESHOLD","BindingsService","nodeWeights","computeNodeWeight","GraphReducerImpl","ClassSize","Math","round","method_count","lambda_count","field_count","inner_class_count","classSize","count","ClassSizeService","getClassSize","memorySizeKb","getMemorySize","getSummary","info","GraphSizeService","classSizeService","assign","initialKey","reduced","parentClassSize","has","childClassSize","WeightServiceManager","weightServices","BrowserHeader","alignment","autoTrigger","closeOnClick","constrainWidth","container","coverTrigger","hover","right","FileDropzone","onFilesSelected","children","onDrop","useCallback","useDropzone","getRootProps","isDragActive","getInputProps","App","loadedManifest","refresh","loadFile","success","loadUrl","url","acceptedFiles","alert","ReactRouterRoute","Route","files","onChangeManifestFile","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.949ab2b4.chunk.js","sourcesContent":["/**\n * Provides all of the route helpers\n */\nexport class Paths {\n  static Home = \"/:component?\"\n  static Component = \"/:component\"\n  static Module = \"/module/:module\"\n  static GraphModule = \"/:component/module/:module\"\n  static GraphScope = \"/:component/scope/:scope\"\n  static GraphNode = \"/:component/node/:node\"\n  static GraphClosure = \"/:component/closure/:key\"\n  static SubComponent = \"/:component/:subcomponent\"\n}\n\nexport class Routes {\n  static Home = \"/\"\n  static Component = (component: string): string => {\n    return `/${encodeURIComponent(component)}`;\n  }\n  static Module = (module: string): string => {\n    return `/module/${encodeURIComponent(module)}`;\n  }\n  static GraphNode = (component: string, node: string): string => {\n    return `/${encodeURIComponent(component)}/node/${encodeURIComponent(node)}`;\n  }\n  static GraphModule = (component: string, module: string): string => {\n    return `/${encodeURIComponent(component)}/module/${encodeURIComponent(module)}`;\n  }\n  static GraphScope = (component: string, scope: string): string => {\n    return `/${encodeURIComponent(component)}/scope/${encodeURIComponent(scope)}`;\n  }\n  static GraphClosure = (component: string, key: string): string => {\n    return `/${encodeURIComponent(component)}/closure/${encodeURIComponent(key)}`;\n  }\n\n  static SubComponent = (component: string, subcomponent: string): string => {\n    return `/${encodeURIComponent(component)}/${encodeURIComponent(subcomponent)}`;\n  }\n}\n\nexport default Routes;","/**\n * Configuration class based on input Config.json\n */\n\nimport data from \"src/Config.json\";\n\ninterface Config {\n  // Title of the page\n  TITLE: string;\n  // Url to the code in github repo\n  REPO_URL?: string;\n  // Public Url\n  PUBLIC_URL: string;\n  // Components manifest url\n  COMPONENTS_MANIFEST_JSON_URL: string;\n}\n\nexport default {\n  TITLE: data.title || \"Graph Browser\",\n  REPO_URL: data.repo_url || \"\",\n  PUBLIC_URL: process.env.PUBLIC_URL || \"\",\n  COMPONENTS_MANIFEST_JSON_URL: (process.env.PUBLIC_URL || \"\") + '/ComponentsManifest.json'\n} as Config;","import React from \"react\";\nimport Config from \"../models/Config\";\n\ninterface Props {\n  link: string;\n}\n\nconst CodeLink = ({ link }: Props) => {\n  if (Config.REPO_URL) {\n    let filename = link.split(\".\").pop();\n    return (\n      <a\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n        href={Config.REPO_URL + \"/search?q=filename:\" + filename}\n        className=\"unselectable\"\n      >\n        <i className=\"tiny material-icons\">open_in_new</i>\n      </a>\n    );\n  } else {\n    return <span></span>;\n  }\n};\n\nexport default CodeLink;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\ninterface Props {\n  kind: string | null | undefined;\n}\n\nconst NodeIcon = ({ kind }: Props) => {\n  let icon = getNodeIcon(kind);\n  if (!icon) {\n    return <span />;\n  }\n\n  return (\n    <span className={classNames(\"node-icon\", icon.color)} title={kind || \"\"}>\n      {icon.label}\n    </span>\n  );\n};\n\n// TODO: Make this configurable\nlet getNodeIcon = (\n  kind: string | null | undefined\n): { label: string; color: string } | undefined => {\n  switch (kind) {\n    case \"INSTANCE\": {\n      return { label: \"I\", color: \"deep-purple\" };\n    }\n    case \"PROVIDER\": {\n      return { label: \"P\", color: \"blue\" };\n    }\n    case \"LAZY\": {\n      return { label: \"L\", color: \"indigo\" };\n    }\n    default: {\n      return undefined;\n    }\n  }\n};\n\nexport default NodeIcon;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { Weight } from \"../models/Graph\";\n\ntype Props = {\n  weight: Weight | null | undefined;\n};\n\nconst NodeWeight = ({ weight }: Props) => {\n  if (!weight) {\n    return <span />;\n  }\n\n  return (\n    <span>\n      {weight && weight.value > 0 &&\n        <span\n          className={classNames(\"unselectable\", \"bubble\", getWeightColor(weight))}\n          title={weight.summary}\n        >\n          {Number.isInteger(weight.value) ? weight.value : weight.value.toFixed(1)} {weight.unit ? weight.unit : ''}\n        </span>\n      }\n    </span>\n  );\n};\n\nconst getWeightColor = (weight: Weight): string => {\n  if (weight.value > weight.largeThreshold) {\n    return \"red\";\n  } else if (weight.value > weight.smallThreshold) {\n    return \"orange\";\n  } else {\n    return \"green\";\n  }\n};\n\nexport default NodeWeight;\n","import React from \"react\";\nimport { Node, Weight } from \"../models/Graph\";\nimport CodeLink from \"./CodeLink\";\nimport NodeIcon from \"./NodeIcon\";\nimport NodeWeight from \"./NodeWeight\";\n\ntype Props = {\n  node: Node;\n  weight?: Weight;\n  onSelect?: (node: string) => void;\n  scoped?: boolean;\n  kind?: string;\n};\n\nfunction getDisplayName(key: string): string {\n  return key\n    .replace(\"java.util.\", \"\")\n    .replace(\"java.lang.\", \"\")\n    .replace(\"javax.inject.\", \"\")\n    .replace(\"io.reactivex.\", \"\")    \n}\n\nconst NodeLink: React.FC<Props> = ({\n  node,\n  onSelect,\n  weight = undefined,\n  scoped = false,\n  kind\n}: Props) => {\n  const scope = node.scope ? `[${node.scope.split(\".\").pop()}]` : \"\";\n  return (<div>\n    <div\n      className=\"binding\"\n      onClick={() => onSelect && onSelect(node.key)}\n    >\n      <div className=\"text\">\n        <NodeIcon kind={kind || node.kind} />\n        {scoped && <span className=\"light-text\">{scope}&nbsp;</span>}\n        {getDisplayName(node.key)}&nbsp;\n      </div>\n      <div>\n        <CodeLink link={node.key} />\n        <NodeWeight weight={weight} />\n      </div>\n    </div>\n  </div>);\n\n};\n\nexport default NodeLink;\n","import React from \"react\";\nimport { Weight } from \"../models/Graph\";\nimport NodeWeight from \"./NodeWeight\";\n\ntype Props = {\n    subcomponentName: string;\n    weight: Weight;\n    onSelect?: (node: string) => void;\n};\n\n\nfunction getDisplayName(key: string): string {\n    let index = key.lastIndexOf(\".\");\n    return key.substring(index + 1)\n  }\n\nconst SubcomponentLink: React.FC<Props> = ({\n  subcomponentName,\n  weight,\n  onSelect\n}: Props) => {\n  return (<div>\n    <div className=\"binding\" onClick={() => onSelect && onSelect(subcomponentName)}>\n      <div className=\"text\">\n        {getDisplayName(subcomponentName)}\n      </div>\n      <div>\n        <NodeWeight weight={weight} />\n      </div>\n    </div>\n  </div>);\n\n};\n\nexport default SubcomponentLink;\n","import React from \"react\";\nimport { Node, Weight } from \"../models/Graph\";\nimport CodeLink from \"./CodeLink\";\nimport Routes from \"src/Routes\";\nimport NodeWeight from \"./NodeWeight\";\nimport { Link } from \"react-router-dom\";\n\ntype Props = {\n  componentName: string;\n  weight?: Weight;\n};\n\nconst ComponentLink: React.FC<Props> = ({\n  componentName,\n  weight = undefined\n}: Props) => {\n  return (<div>\n    <div className=\"binding\">\n      <div className=\"text\">\n        <Link to={Routes.Component(componentName)}>\n        {componentName}\n        </Link>\n      </div>\n      <div>\n        <CodeLink link={componentName} />\n        <NodeWeight weight={weight} />\n      </div>\n    </div>\n    </div>\n  );\n\n};\n\nexport default ComponentLink;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Routes from \"src/Routes\";\nimport GraphManager from \"../models/GraphManager\";\nimport NodeLink from \"./NodeLink\";\nimport WeightService from \"../service/WeightService\";\nimport SubcomponentLink from \"./SubcomponentLink\";\nimport ComponentLink from \"./ComponentLink\";\n\ntype Props = {\n  graphManager: GraphManager;\n  weightService: WeightService;\n  componentName: string;\n  onSelect: (graphName: string, key: string) => any;\n};\n\nconst ComponentSummary = ({ graphManager, weightService, componentName, onSelect }: Props) => {\n  const graph = graphManager.getComponent(componentName);\n  const history = useHistory();\n  const scopedBindings = graph.nodes.filter(binding => !!binding.scope);\n  const componentSet = new Set<string>();\n  graph.nodes\n    .filter(binding => binding.component != undefined && binding.component !== componentName)\n    .forEach(binding => componentSet.add(binding.component as string));\n\n  const membersInjectors = graph.nodes.filter(\n      binding =>\n        binding.kind === \"MEMBERS_INJECTION\"\n    );\n\n  const multiBindings = graph.nodes.filter(\n    binding =>\n      binding.kind === \"MULTIBOUND_SET\" || binding.kind === \"MULTIBOUND_MAP\"\n  );\n\n  scopedBindings.sort((nodeA, nodeB) => {\n    const weightA = weightService.getWeight(componentName, nodeA.key);\n    const weightB = weightService.getWeight(componentName, nodeB.key);\n    return (weightB ? weightB.value : 0) - (weightA ? weightA.value : 0);\n  });\n\n  multiBindings.sort((nodeA, nodeB) => {\n    const weightA = weightService.getWeight(componentName, nodeA.key);\n    const weightB = weightService.getWeight(componentName, nodeB.key);\n    return (weightB ? weightB.value : 0) - (weightA ? weightA.value : 0);\n  });\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"card-title\">\n          <ComponentLink\n            componentName={componentName}\n            weight={weightService.getWeight(componentName)}\n          />\n        </div>\n\n        {membersInjectors.length > 0 &&\n          <div>\n          <br />\n          <h6>Members Injectors:</h6>\n          {membersInjectors.map(binding => {\n            return (\n              <NodeLink\n                key={binding.key}\n                weight={weightService.getWeight(componentName, binding.key)}\n                scoped={true}\n                node={binding}\n                onSelect={node => onSelect(componentName, node)}\n              />\n            );\n          })}\n        </div>\n        }\n\n        {componentSet.size > 0 &&\n          <div>\n            <br />\n            <h6>{componentSet.size} Subcomponents:</h6>\n            {Array.from(componentSet).map(subcomponent => {\n              return (\n                <SubcomponentLink\n                  subcomponentName={subcomponent}\n                  weight={graphManager.getSubcomponentWeight(subcomponent)}\n                  onSelect={node =>\n                    history.push(Routes.SubComponent(componentName, subcomponent))\n                  }\n                />\n              );\n            })}\n          </div>\n        }\n\n        {multiBindings.length > 0 &&\n          <div>\n            <br />\n            <h6>{multiBindings.length} Multibindings:</h6>\n            {multiBindings.map(binding => {\n              return (\n                <NodeLink\n                  key={binding.key}\n                  weight={weightService.getWeight(componentName, binding.key)}\n                  scoped={true}\n                  node={binding}\n                  onSelect={node => onSelect(componentName, node)}\n                />\n              );\n            })}\n          </div>\n        }\n\n        {scopedBindings.length > 0 &&\n          <div>\n            <br />\n            <h6>{scopedBindings.length} Scoped Bindings:</h6>\n            {scopedBindings.map(binding => {\n              return (\n                <NodeLink\n                  key={binding.key}\n                  weight={weightService.getWeight(componentName, binding.key)}\n                  scoped={true}\n                  node={binding}\n                  onSelect={node => onSelect(componentName, node)}\n                />\n              );\n            })}\n          </div>\n        }\n\n      </div>\n    </div>\n  );\n};\n\nexport default ComponentSummary;\n","import React, { useState, useMemo, useRef, useEffect } from \"react\";\nimport GraphManager, { GraphMatchResult } from \"../models/GraphManager\";\nimport Autosuggest from \"react-autosuggest\";\nimport NodeWeight from \"./NodeWeight\";\nimport WeightService from \"../service/WeightService\";\n\nconst MAX_SUGGESTIONS = 40;\n\ninterface Props {\n  graphManager: GraphManager;\n  weightService: WeightService;\n  componentName: string | null | undefined;\n  onSelect: (component: string | undefined, node: string) => any;\n}\n\nfunction getSuggestions(\n  graphManager: GraphManager,\n  componentName: string,\n  value: string\n): GraphMatchResult[] {\n  return graphManager.getMatches(\n    \"\",\n    value.trim().toLowerCase(),\n    MAX_SUGGESTIONS,\n    false\n  );\n}\n\nconst NodeAutosuggest = ({ graphManager, weightService, onSelect, componentName }: Props) => {\n  const [query, setQuery] = useState(\"\");\n  const searchRef = useRef<Autosuggest<GraphMatchResult>>(null);\n\n  const suggestions = useMemo(\n    () => getSuggestions(graphManager, componentName || \"\", query),\n    [graphManager, componentName, query]\n  );\n\n  const autoFocusInput = (event?: KeyboardEvent) => {\n    if (event && event.metaKey) {\n      return false;\n    }\n    searchRef &&\n      searchRef.current &&\n      searchRef.current.input &&\n      searchRef.current.input.focus();\n  };\n\n  useEffect(() => {\n    autoFocusInput();\n    window.addEventListener(\"keydown\", autoFocusInput);\n    return () => window.removeEventListener(\"keydown\", autoFocusInput);\n  }, []);\n\n  return (\n    <Autosuggest<GraphMatchResult>\n      ref={searchRef}\n      suggestions={suggestions}\n      onSuggestionsFetchRequested={() => {}}\n      onSuggestionsClearRequested={() => setQuery(\"\")}\n      onSuggestionSelected={(_, data) => {\n        onSelect(data.suggestion.componentName, data.suggestion.node.key);\n      }}\n      getSuggestionValue={suggestion => suggestion.node.key}\n      // TODO: Replace with simple node\n      renderSuggestion={suggestion => (\n        <div>\n          <span className=\"light-text\">\n            {suggestion.componentName\n              ? \"[\" + suggestion.componentName.split(\".\").pop() + \"] \"\n              : \"\"}\n          </span>\n          {suggestion.node.key}\n          <NodeWeight\n            weight={weightService.getWeight(\n              suggestion.componentName,\n              suggestion.node.key\n            )}\n          />\n        </div>\n      )}\n      inputProps={{\n        value: query,\n        placeholder: \"Find dependencies\",\n        onChange: (_, params) => {\n          setQuery(params.newValue);\n        }\n      }}\n    />\n  );\n};\n\nexport default NodeAutosuggest;\n","import React from \"react\";\nimport GraphManager from \"../models/GraphManager\";\nimport { Link } from \"react-router-dom\";\nimport Routes from \"src/Routes\";\nimport CodeLink from \"./CodeLink\";\nimport NodeWeight from \"./NodeWeight\";\nimport WeightServiceManager from \"../service/WeightServiceManager\";\nimport ComponentLink from \"./ComponentLink\";\n\ntype Props = {\n  graphManager: GraphManager;\n  weightServiceManager: WeightServiceManager;\n};\n\nconst Home = ({ graphManager, weightServiceManager }: Props) => {\n\n  var components = graphManager.componentSet.components\n\n  const weightService = weightServiceManager.getWeightService();\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"card-title\">Components</div>\n        {components.map(component => {\n          return <ComponentLink\n            componentName={component.name}\n            weight={weightService.getWeight(component.name)}\n          />\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import GraphReducer from \"./GraphReducer\";\nimport ComponentSet, { Node, Component, Module, Scope, Weight } from \"./Graph\";\nimport axios from \"axios\";\nimport { ClassInfo } from \"./ClassSize\";\nimport Config from \"./Config\";\n\nexport const ALL_COMPONENTS = \"\";\n\nexport type GraphMatchResult = { node: Node; componentName: string };\n\nconst SUBCOMPONENT_LARGE_THRESHOLD = 500;\nconst SUBCOMPONENT_SMALL_THRESHOLD = 10;\n\n/**\n * Wrapper to load the graph\n */\nexport default class GraphManager {\n  manifestUrl?: string;\n  classInfoUrl?: string;\n\n  componentSet: ComponentSet = { components: [] };\n  classInfo?: { [key: string]: ClassInfo };\n\n  // Caches to speed up graph-based operations\n  private nodeMap: { [componentName: string]: { [key: string]: Node } } = {};\n  private componentMap: { [componentName: string]: Component } = {};\n  private subcomponentWeights: { [key: string]: Weight }  = {};\n  private callsitesMap: {\n    [componentName: string]: { [key: string]: Node[] };\n  } = {};\n\n  async loadUrl(manifestUrl: string): Promise<boolean> {\n    let classInfoUrl = manifestUrl.substring(0, manifestUrl.lastIndexOf(\"\\/\") + 1) + \"ClassInfo.json\";    \n\n    try {\n      let classInfoResponse = await axios.get(classInfoUrl);\n      this.classInfo = classInfoResponse.data as { [key: string]: ClassInfo };\n    } catch {\n      // classInfo is optional\n    }\n    try {\n      let manifestResponse = await axios.get(manifestUrl)      \n      this.componentSet = manifestResponse.data as ComponentSet;\n      this.populateCaches();\n    } catch {\n      return false;\n    }\n\n    this.manifestUrl = manifestUrl;\n    this.classInfoUrl = classInfoUrl;\n    return true;\n  }\n  \n  async loadFile(manifestFile: File): Promise<boolean> {\n    let manifestResponse = await this.readFileAsync(manifestFile)\n    this.componentSet = JSON.parse(manifestResponse) as ComponentSet;\n    this.populateCaches();\n    return true;\n  }\n\n  async readFileAsync(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        resolve(reader.result as string);\n      };\n\n      reader.onerror = reject;\n      reader.readAsText(file);\n    })\n  }\n\n  getMatches(\n    componentName: string | undefined,\n    query: string,\n    max: number,\n    strictMatch: boolean\n  ): GraphMatchResult[] {\n    const components = componentName\n      ? [this.getComponent(componentName)]\n      : this.componentSet.components;\n\n    let matches = [];\n\n    for (const component of components) {\n      for (const node of component.nodes) {\n\n        if (strictMatch) {\n          if (node.key.toLowerCase() == query.toLowerCase()) {\n            matches.push({ node, componentName: component.name });\n          }\n        } else if (node.key.toLowerCase().includes(query.toLowerCase())) {\n          matches.push({ node, componentName: component.name });\n        }\n\n        if (matches.length >= max) {\n            return matches;\n        }\n      }\n    }\n\n    return matches;\n  }\n\n  getComponent(componentName: string): Component {\n    const component = this.componentMap[componentName];\n\n    if (!component) {\n      throw Error(`Could not find ${componentName} component`);\n    }\n\n    return component;\n  }\n\n  getNode(component: string | undefined, node: string): Node | undefined {\n    return this.nodeMap[component ? component : ALL_COMPONENTS][node];\n  }\n\n  getModule(component: string, moduleName: string): Module {\n    const nodes = Object.values(this.nodeMap[component]).filter((node: Node) => {\n      return node.module === moduleName;\n    });\n\n    return {\n      key: moduleName,\n      bindings: nodes\n    };\n  }\n\n  getScope(component: string, scope: string): Scope {\n    const nodes = Object.values(this.nodeMap[component]).filter((node: Node) => {\n      return node.scope === scope;\n    });\n\n    return {\n      scope: scope,\n      bindings: nodes\n    };\n  }\n\n  getCallsites(componentName: string, node: string): Node[] {\n    return (this.callsitesMap[componentName][node] || []).map((binding: Node) => {\n      const reference = this.getNode(componentName, binding.key);\n      if (!reference) {\n        return binding;\n      }\n\n      const referenceNode = reference.dependencies.find(d => d.key === node);\n\n      if (!referenceNode) {\n        return binding;\n      }\n\n      return {\n        ...binding,\n        kind: referenceNode.kind\n      };\n    });\n  }\n\n  getSubcomponentWeight(subcomponent: string): Weight {\n    return this.subcomponentWeights[subcomponent];\n  }\n\n  getSubcomponentBindings(component: string, subcomponent: string): Node[] {\n    return Object.values(this.nodeMap[component]).filter((node: Node) => {\n      return node.component === subcomponent\n    });\n  }\n\n  computeNodeWeight(componentName: string, key: string, graphReducer: GraphReducer): Weight {\n    const node = this.getNode(componentName, key);\n    if (node) {\n      return this.computeWeightForNodes(componentName, [node], graphReducer);\n    }\n    return graphReducer.result();\n  }\n\n  /** Computes weight for a list of nodes, aggregating and returning result from graph reducer. */\n  computeWeightForNodes(componentName: string, queue: Node[], graphReducer: GraphReducer): Weight {\n    const visited: { [key: string]: boolean } = {};\n    while (queue.length) {\n      const queueNode = queue.shift();\n\n      // TODO: This can be undefined due to bad shouldSkipNode logic\n      if (!queueNode) {\n        continue;\n      }\n\n      graphReducer.reduce(queueNode.key);\n      visited[queueNode.key] = true;\n\n      for (const dependency of queueNode.dependencies) {\n        if (visited[dependency.key]) {\n          continue;\n        } else if (this.shouldSkipWeight(componentName, dependency.key)) {\n          visited[dependency.key] = true;\n          continue;\n        }\n\n        graphReducer.reduce(dependency.key);\n\n        const node = this.getNode(componentName, dependency.key);\n        if (node) {\n          queue.push(node);\n        }\n        visited[dependency.key] = true;\n      }\n    }\n\n    return graphReducer.result();\n  }\n\n  private shouldSkipWeight(componentName: string, dependencyKey: string): boolean | undefined {\n    const bindingInComponent = this.getNode(componentName, dependencyKey);\n    return (\n      bindingInComponent && bindingInComponent.kind === \"MEMBERS_INJECTION\"\n    );\n  }\n\n  private populateCaches() {\n    // Store all nodes under `ALL_COMPONENTS` key for universal search\n    this.nodeMap[ALL_COMPONENTS] = {};\n    this.callsitesMap[ALL_COMPONENTS] = {};\n\n    // traverse the components\n    for (const component of this.componentSet.components) {\n      this.nodeMap[component.name] = {};\n      this.callsitesMap[component.name] = {};\n      this.componentMap[component.name] = component;\n\n      // TODO: should avoid modifying the components\n      component.nodes = component.nodes.filter(node => !this.shouldSkipNode(node));\n\n      for (const node of component.nodes) {\n        this.nodeMap[component.name][node.key] = node;\n        this.nodeMap[ALL_COMPONENTS][node.key] = node;\n\n        // populate subcomponent weight\n        if (node.component && node.component != component.name) {\n          let subcomponent = node.component;\n          if (!this.subcomponentWeights[subcomponent]) {\n            this.subcomponentWeights[subcomponent] = {\n              value: 0,\n              smallThreshold: SUBCOMPONENT_SMALL_THRESHOLD,\n              largeThreshold: SUBCOMPONENT_LARGE_THRESHOLD\n            } as Weight;\n          }\n          this.subcomponentWeights[subcomponent].value++;\n        }\n\n        for (const dep of node.dependencies) {\n          if (!this.callsitesMap[component.name][dep.key]) {\n            this.callsitesMap[component.name][dep.key] = [];\n          }\n          if (!this.callsitesMap[ALL_COMPONENTS][dep.key]) {\n            this.callsitesMap[ALL_COMPONENTS][dep.key] = [];\n          }\n\n          this.callsitesMap[component.name][dep.key].push(node);\n          this.callsitesMap[ALL_COMPONENTS][dep.key].push(node);\n        }\n      }\n    }\n  }\n\n  private shouldSkipNode(node: Node): boolean {\n    return node.kind === \"BOUND_INSTANCE\";\n  }\n}\n","import React from \"react\";\nimport GraphManager from \"../models/GraphManager\";\nimport { ALL_COMPONENTS } from \"../models/GraphManager\";\nimport { useHistory } from \"react-router-dom\";\nimport NodeLink from \"./NodeLink\";\nimport Routes from \"src/Routes\";\nimport WeightService from \"../service/WeightService\";\n\nexport type Props = {\n  graphManager: GraphManager;\n  weightService: WeightService;\n  componentName: string;\n  moduleName: string;\n};\n\nexport function ModuleSummary({ componentName, moduleName, graphManager, weightService }: Props) {\n  const graphModule = graphManager.getModule(componentName, moduleName);\n  const history = useHistory();\n\n  if (!graphModule) {\n    return (\n      <div>\n        Cannot find ${graphModule} module in ${componentName} graph\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"card-title\">\n          Module: {graphModule.key}\n        </div>\n\n        <h6>Bindings</h6>\n        {graphModule.bindings.map(node => {\n          return (\n            <NodeLink\n              key={node!.key}\n              weight={weightService.getWeight(ALL_COMPONENTS, node!.key)}\n              scoped={true}\n              node={node!}\n              onSelect={node => {\n                history.push(Routes.GraphNode(componentName, node));\n              }}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import Select from \"react-select\";\nimport React from \"react\";\nimport { ValueType, OptionTypeBase } from \"react-select/src/types\";\n\ninterface Props {\n  componentName: string;\n  graphs: String[];\n  selectGraph: (componentName: string) => any;\n}\n\nfunction displayName(component: string): string {\n  var pos = component.lastIndexOf('.')\n  if (pos === -1) {\n    return component\n  }\n  return component.substring(pos+1)\n}\n\n/**\n * Component Selector\n * If no component is specified `All Components` will be picked\n */\nexport const GraphSelector = ({\n  componentName,\n  graphs,\n  selectGraph\n}: Props) => {\n  let graphOptions = graphs.map(graph => {\n    return { value: graph, label: displayName(graph.toString()) };\n  });\n\n  let defaultValue = componentName\n    ? ({ value: componentName, label: displayName(componentName) } as ValueType<OptionTypeBase>)\n    : graphOptions[0];\n\n  return (\n    <Select\n      value={defaultValue}\n      className=\"component-select\"\n      classNamePrefix=\"react-select\"\n      onChange={value => selectGraph((value as { value: string }).value)}\n      placeholder=\"Select graph...\"\n      options={graphOptions}\n    />\n  );\n};\n","import React from \"react\";\nimport GraphManager from \"../models/GraphManager\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport NodeLink from \"./NodeLink\";\nimport Routes from \"src/Routes\";\nimport { GraphSelector } from \"./GraphSelector\";\nimport WeightService from \"../service/WeightService\";\nimport { Node } from \"src/models/Graph\";\n\nexport type Props = {\n  graphManager: GraphManager;\n  weightService: WeightService;\n  componentName: string;\n  nodeName: string;\n};\n\nfunction readableKind(kind: String) {\n  // https://github.com/google/dagger/blob/master/java/dagger/model/BindingKind.java\n  switch(kind) {\n    case \"PROVISION\":\n      return \"Module provision\"\n    case \"INJECTION\":\n      return \"@Inject constructor\"\n    case \"DELEGATE\":\n      return \"@Binds delegate\"\n    case \"MEMBERS_INJECTION\":\n        return \"Members Injector\"\n    case \"COMPONENT\":\n      return \"Component\"\n    case \"COMPONENT_DEPENDENCY\":\n      return \"Component Dependency\"\n    case \"COMPONENT_PROVISION\":\n      return \"Component Provision\"\n    case \"COMPONENT_PRODUCTION\":\n      return \"Component Production\"\n    case \"BOUND_INSTANCE\":\n      return \"Bound instance\"\n    case \"MULTIBOUND_SET\":\n      return \"Multibound Set\"\n    case \"MULTIBOUND_MAP\":\n      return \"Multibound Map\"\n    case \"OPTIONAL\":\n      return \"Optional\"\n    case \"SUBCOMPONENT_CREATOR\":\n      return \"Subcomponent Creator\"\n  }\n\n  return kind\n}\n\nfunction createdComponent(graphManager: GraphManager, componentName: string, node: Node) {\n  if (!node.adjacentNodes) {\n    return \"\"\n  }\n  \n  for (var nodeKey of node.adjacentNodes) {\n    var componentNode = graphManager.getNode(componentName, nodeKey);\n    // Node.Kind will be null for ComponentNodes\n    // Node.key == componentName for parent components\n    if (componentNode && !componentNode.kind && nodeKey != componentName) {\n      return nodeKey\n    }\n  }\n  return \"\"\n}\n\nexport function NodeSummary({ graphManager, weightService, componentName, nodeName }: Props) {\n  const history = useHistory();\n  const node = graphManager.getNode(componentName, nodeName);\n\n  if (!node) {\n    return (\n      <div>\n      Cannot find <strong>{nodeName}</strong> node in <strong>{componentName}</strong> graph\n      </div>\n    );\n  }\n\n  const bindingModule = node.module;\n  const availableGraphs = graphManager.getMatches(\"\", node.key, 40, true).map(it => it.componentName)\n  const callsites = graphManager.getCallsites(componentName, node.key);\n  const bindingKind = readableKind(node.kind)\n  const componentSimpleName = componentName.substring(componentName.lastIndexOf('.') + 1)\n  const simpleScope = node.scope && node.scope.substring(node.scope.lastIndexOf('.') + 1)\n  const createdComponentKey: string = createdComponent(graphManager, componentName ,node);\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"card-title\">\n          <NodeLink\n              node={node}\n              weight={weightService.getWeight(componentName, node.key)}\n          />\n        </div>\n\n        <p>\n          <span className=\"unselectable\">Component: </span>\n          {availableGraphs.length == 1 &&\n          <Link\n            className=\"soft-link\"\n            to={Routes.Component(componentName)}\n          >\n            {componentSimpleName}\n          </Link>\n          }\n          {availableGraphs.length > 1 &&\n          <GraphSelector\n              componentName={componentName}\n              graphs={availableGraphs}\n              selectGraph={graph => history.push(Routes.GraphNode(graph, node.key))}\n          />\n          }\n        </p>\n\n\n        {node.component && (componentName !== node.component) && (\n        <p>\n        <span className=\"unselectable\">Subcomponent: </span>\n        <Link\n                className=\"soft-link\"\n                to={Routes.SubComponent(componentName, node.component)}\n              >\n                {node.component}\n          </Link>\n        </p>\n        )}\n\n        <p>\n          <span>Type: </span>\n          {bindingKind}\n          {createdComponentKey && \n            <span className=\"unselectable\"> | &nbsp;\n            <Link\n                    className=\"soft-link\"\n                    to={Routes.GraphNode(componentName, createdComponentKey)}\n                  >\n                    {createdComponentKey}\n              </Link>\n              </span>\n            }\n        </p>\n\n        {node.scope && (\n          <p>\n            <span className=\"unselectable\">Scope: </span>\n            <Link\n                className=\"soft-link\"\n                to={Routes.GraphScope(componentName, node.scope)}\n              >\n                @{simpleScope}\n              </Link>\n          </p>\n        )}\n\n        {node.module && (\n          <p>\n            <span className=\"unselectable\">Module: </span>\n            {bindingModule ? (\n              <Link\n                className=\"soft-link\"\n                to={Routes.GraphModule(componentName, node.module)}\n              >\n                {bindingModule}\n              </Link>\n            ) : (\n              <span>n/a</span>\n            )}\n          </p>\n        )}\n        <br />\n        <h6>Dependencies\n          &nbsp;|&nbsp;\n          <Link\n            className=\"soft-link\"\n            to={Routes.GraphClosure(componentName, node.key)}\n          >\n          transitive\n          </Link>\n        </h6>\n        {node &&\n          node.dependencies\n            .map(d => ({\n              node: graphManager.getNode(componentName, d.key),\n              dep: d\n            }))\n            .filter(({ node }) => node !== undefined)\n            .map(({ node, dep }) => {\n              return (\n                <NodeLink\n                  key={node!.key}\n                  weight={weightService.getWeight(componentName, node!.key)}\n                  kind={dep.kind}\n                  scoped={true}\n                  node={node!}\n                  onSelect={node =>\n                    history.push(Routes.GraphNode(componentName, node))\n                  }\n                />\n              );\n            })}\n        {!node || (node.dependencies.length === 0 && <div>None</div>)}\n        <br />\n        <h6>Callsites</h6>\n        {callsites.map(binding => {\n          return (\n            <NodeLink\n              key={binding.key}\n              node={binding}\n              kind={binding.kind}\n              scoped={true}\n              onSelect={node => history.push(Routes.GraphNode(componentName, node))}\n            />\n          );\n        })}\n        {callsites.length === 0 && <div>None</div>}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport GraphManager from \"../models/GraphManager\";\nimport { ALL_COMPONENTS } from \"../models/GraphManager\";\nimport { useHistory } from \"react-router-dom\";\nimport NodeLink from \"./NodeLink\";\nimport WeightService from \"../service/WeightService\";\n\nexport type Props = {\n  graphManager: GraphManager;\n  weightService: WeightService;\n  componentName: string;\n  scope: string;\n};\n\nexport function ScopeSummary({ graphManager, weightService, componentName, scope }: Props) {\n  const graphScope = graphManager.getScope(componentName, scope);\n  const history = useHistory();\n\n  if (!graphScope) {\n    return (\n      <div>\n        Cannot find ${graphScope} module in ${componentName} graph\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"card-title\">\n          Scope\n          <br />\n          {graphScope.scope}\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col s12\">\n            <h6>Bindings ({graphScope.bindings.length})</h6>\n            {graphScope.bindings.map(node => {\n              return (\n                <NodeLink\n                  key={node.key}\n                  weight={weightService.getWeight(ALL_COMPONENTS, node.key)}\n                  scoped={true}\n                  node={node}\n                  onSelect={node => {\n                    history.push(`/${componentName}/node/${node}`);\n                  }}\n                />\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Node } from \"../models/Graph\";\nimport GraphManager from \"../models/GraphManager\";\nimport Routes from \"src/Routes\";\nimport NodeLink from \"./NodeLink\";\n\nconst NO_SCOPE = \"@\"\n\ntype Props = {\n  graphManager: GraphManager,\n  componentName: string,\n  nodeName: string;\n};\n\ntype Dependencies = {\n  bindings: { [key:string]:Node[]; }\n  modules: { [key:string]:Node[]; }\n  moduleSummary: { [key:string]:number; }\n}\n\nexport default function NodeClosure({ graphManager, componentName, nodeName }: Props) {\n\n  const dependencies = getDependencies(graphManager, componentName, nodeName);\n\n  const scopedDependencies = Object.keys(dependencies.bindings).filter((scope: string) => {\n    return scope != NO_SCOPE && scope != \"@dagger.Reusable\"\n  });\n\n  const modules = Object.keys(dependencies.modules);\n\n  const history = useHistory();\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"card-title\">\n          Transitive Dependencies: {nodeName}\n        </div>      \n\n        {scopedDependencies.length > 0 && (\n          <div>\n            <br/>\n            <h6>Scoped Bindings</h6>\n            { scopedDependencies.map((scope: string) => {\n              return (<div>\n                <p>{getScopeDisplayName(scope)}</p>\n                {dependencies.bindings[scope].map((binding: Node) => {\n                return (\n                  <div>{binding.key}</div>\n                )  \n              })}</div>)\n            })}\n          </div>\n        )}\n\n        {modules.length > 0 && (\n          <div>\n            <br/>\n            <h6>Module Bindings</h6>\n            { modules.map((module: string) => {\n              return (\n                <div>\n                  <div>\n                    <Link className=\"soft-link\" to={Routes.GraphModule(componentName, module)}>\n                      {getModuleDisplayName(module)}\n                    </Link>\n                    &nbsp;\n                    (\n                    {dependencies.modules[module].length}\n                    /\n                    {dependencies.moduleSummary[module]}\n                    )\n                  </div>\n                  {dependencies.modules[module].map((binding: Node) => {\n                    return (\n                      <NodeLink\n                        key={binding.key}\n                        node={binding}\n                        kind={binding.kind}\n                        scoped={true}\n                        onSelect={node => history.push(Routes.GraphNode(componentName, binding.key))}\n                      />\n                    );  \n                  })}\n                </div>\n              )\n            })}\n          </div>\n        )}          \n      </div>\n    </div>\n  );\n}\n\nfunction getDependencies(graphManager: GraphManager, componentName: string, nodeName: string): Dependencies {\n  const visited: { [key:string]:boolean; } = {}\n  const queue: string[] = [nodeName]\n\n  const bindings: { [key:string]:Node[]; } = {}\n  const moduleBindings: { [key:string]:Node[]; } = {}\n  const moduleSummary: { [key:string]:number } = {}\n\n\n  // Module overviews\n  graphManager.getComponent(componentName).nodes.forEach(node => {\n    const module = node.module\n    if (module) {\n      moduleSummary[module] = (moduleSummary[module] || 0) + 1\n    }\n  })\n\n  while (queue.length != 0) {\n    const bindingKey = queue.shift()\n\n    if (!bindingKey || visited[bindingKey]) {\n      continue;\n    }\n    visited[bindingKey] = true\n    \n    const binding = graphManager.getNode(componentName, bindingKey)\n    if (binding) {\n      // Add this binding to our output\n      if (binding.module) {\n        var mb = moduleBindings[binding.module] || (moduleBindings[binding.module] = [])\n        mb.push(binding)\n      } else {\n        var sb = bindings[binding.scope || NO_SCOPE] || (bindings[binding.scope || NO_SCOPE] = [])\n        sb.push(binding)\n      }\n      \n      // Crawl binding dependencies\n      binding.dependencies.forEach(dep => {\n        queue.push(dep.key)\n      })\n    }\n  }\n\n  return {\n    bindings: bindings,\n    modules: moduleBindings,\n    moduleSummary: moduleSummary\n  }\n}\n\nfunction getScopeDisplayName(scope: string): string {\n  const idx = scope.lastIndexOf(\".\")\n  if (idx === -1) {\n    return scope\n  }\n  return \"@\" + scope.substring(idx + 1)\n}\n\nfunction getModuleDisplayName(module: string): string {\n  const parts = module.split(\".\")\n  if (parts.length == 0) {\n    return module\n  }\n  var i = 0\n  while (i < parts.length && parts[i][0] !== parts[i][0].toUpperCase()) {\n    i++;\n  }\n  if (i < parts.length) {\n    return parts.slice(i, parts.length).join(\".\")\n  }\n  return module\n}\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Routes from \"src/Routes\";\nimport GraphManager from \"../models/GraphManager\";\nimport NodeLink from \"./NodeLink\";\nimport WeightService from \"../service/WeightService\";\n\ntype Props = {\n    graphManager: GraphManager;\n    subcomponentName: string;\n    componentName: string;\n    weightService: WeightService;\n  };\n\n\nconst SubcomponentSummary = ({ graphManager, subcomponentName, componentName, weightService}: Props) => {\n    const totalBinds = graphManager.getSubcomponentBindings(componentName, subcomponentName)\n    const history = useHistory();\n    totalBinds.sort((nodeA, nodeB) => {\n        const weightA = weightService.getWeight(componentName, nodeA.key);\n        const weightB = weightService.getWeight(componentName, nodeB.key);\n        return (weightB ? weightB.value : 0) - (weightA ? weightA.value : 0)\n    });\n\n    return (\n      <div className=\"card\">\n        <div className=\"card-content\">\n          <div className=\"card-title\">{subcomponentName}</div>\n          <div>{totalBinds.length} total bindings.</div>\n\n          <div>\n          {totalBinds.map(binding => {\n            return (\n              <NodeLink\n                key={binding.key}\n                weight={weightService.getWeight(componentName, binding.key)}\n                kind={binding.kind}\n                scoped={true}\n                node={binding}\n                onSelect={node => history.push(Routes.GraphNode(componentName, binding.key))}\n              />\n            );\n          })}\n          </div>\n\n        </div>\n      </div>\n    );\n};\n\nexport default SubcomponentSummary;\n","import React from \"react\";\nimport Select from \"react-select\";\nimport WeightServiceManager from \"../service/WeightServiceManager\";\n\ninterface Props {\n  weightServiceManager: WeightServiceManager;\n  onSelectWeight: (weight: string) => any;\n}\n\n/** Dropdown for selecting the metric for node weights. */\nexport default class WeightSelector extends React.Component<Props> {\n\n  metricOptions: Array<{ label: string, value: string }>;\n\n  constructor(props: Props) {\n    super(props);\n    this.metricOptions = this.props.weightServiceManager.getWeightServiceNames().map(name => {\n      return { label: name.charAt(0).toUpperCase() + name.slice(1), value: name };\n    });\n    this.state = this.metricOptions[0];\n  }\n\n  render() {\n    return (\n      <Select\n          className=\"component-select weight-select\"\n          classNamePrefix=\"react-select\"\n          value={this.state}\n          onChange={selectedOption => {\n              const option = selectedOption as { value: string };\n              this.setState(option);\n              this.props.onSelectWeight(option.value);\n            }\n          }\n          options={this.metricOptions}\n      />\n    );\n  }\n}","import React, { useMemo } from \"react\";\nimport GraphManager from \"../models/GraphManager\";\nimport { useHistory, Route, Switch } from \"react-router\";\nimport ComponentSummary from \"./ComponentSummary\";\nimport NodeAutosuggest from \"./NodeAutosuggest\";\nimport { BrowserHeader } from \"./BrowserHeader\";\nimport Home from \"src/components/Home\";\nimport { ModuleSummary } from \"src/components/ModuleSummary\";\nimport { NodeSummary } from \"src/components/NodeSummary\";\nimport { ScopeSummary } from \"./ScopeSummary\";\nimport NodeClosure from \"src/components/NodeClosure\";\nimport SubcomponentSummary from \"src/components/SubcomponentSummary\";\nimport WeightSelector from \"../components/WeightSelector\";\nimport Routes, { Paths } from \"src/Routes\";\nimport WeightServiceManager from \"../service/WeightServiceManager\";\nimport classNames from \"classnames\";\nimport \"./GraphBrowser.css\";\nimport Config from \"src/models/Config\";\n\ninterface Props {\n  graphManager: GraphManager;\n  weightServiceManager: WeightServiceManager;\n  componentName: string;\n}\n\nexport const GraphBrowser = ({ graphManager, weightServiceManager, componentName }: Props) => {\n  const graph = useMemo(() => componentName && graphManager.getComponent(componentName), [\n    graphManager,\n    componentName\n  ]);\n\n  const history = useHistory();\n\n  const weightService = weightServiceManager.getWeightService();\n\n  const includeWeightSelector = weightServiceManager.getWeightServiceNames().length > 1;\n\n  return (\n    <div>\n      <div className=\"container\">\n        <div className=\"row search-bar\">\n          <div className={classNames(\"col\", includeWeightSelector ? \"s9\": \"s12\")}>\n            <NodeAutosuggest\n              graphManager={graphManager}\n              weightService={weightService}\n              componentName={graph && graph.name}\n              onSelect={(componentName, node) =>\n                history.push(Routes.GraphNode(componentName || \"\", node))\n              }\n            />\n          </div>\n          {includeWeightSelector &&\n            <div className=\"col s3\">\n              <WeightSelector\n                  weightServiceManager={weightServiceManager}\n                  onSelectWeight={weight => {\n                    weightServiceManager.selectWeightService(weight);\n                    // Refresh the app state without affecting history.\n                    history.replace('#');\n                  }\n                }\n              />\n            </div>\n          }\n        </div>\n        <Switch>\n          <Route\n            path={Paths.Module}\n            render={props => (\n              <ModuleSummary\n                graphManager={graphManager}\n                weightService={weightService}\n                moduleName={decodeURIComponent(props.match.params.module)}\n                componentName={componentName}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.GraphModule}\n            render={props => (\n              <ModuleSummary\n                graphManager={graphManager}\n                weightService={weightService}\n                moduleName={decodeURIComponent(props.match.params.module)}\n                componentName={componentName}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.GraphScope}\n            render={props => (\n              <ScopeSummary\n                graphManager={graphManager}\n                weightService={weightService}\n                scope={decodeURIComponent(props.match.params.scope)}\n                componentName={componentName}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.GraphClosure}\n            render={props => (\n              <NodeClosure\n                graphManager={graphManager}\n                nodeName={decodeURIComponent(props.match.params.key)}\n                componentName={componentName}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.GraphNode}\n            render={props => (\n              <NodeSummary\n                graphManager={graphManager}\n                weightService={weightService}\n                nodeName={decodeURIComponent(props.match.params.node)}\n                componentName={componentName}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.SubComponent}\n            render={props => (\n              <SubcomponentSummary\n                graphManager={graphManager}\n                subcomponentName={decodeURIComponent(props.match.params.subcomponent)}\n                componentName={componentName}\n                weightService={weightService}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.Component}\n            render={props => (\n              <ComponentSummary\n                componentName={decodeURIComponent(props.match.params.component)}\n                graphManager={graphManager}\n                weightService={weightService}\n                onSelect={(componentName, node) =>\n                  history.push(Routes.GraphNode(componentName || \"\", node))\n                }\n              />\n            )}\n          ></Route>\n          <Route\n            path=\"\"\n            render={props => (\n              <Home\n                graphManager={graphManager}\n                weightServiceManager={weightServiceManager}\n              />\n            )}\n          ></Route>\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nexport default GraphBrowser;\n","import React from \"react\";\nimport Spinner from 'react-spinner-material';\n\nexport const GraphSpinner = () => {\n  return (\n    <div className=\"graph-spinner\">\n        <Spinner size={30} spinnerColor={\"#ee6e73\"} spinnerWidth={3} visible={true} />\n    </div>\n  );\n};\n\nexport default GraphSpinner;\n","import React, { useRef } from \"react\";\nimport {Modal, Button} from \"react-materialize\";\n\nexport interface Props {\n  trigger: React.ReactNode,\n  onChangeManifestUrl: (url: string) => void\n}\n\nexport function LoadManifestModal({ trigger, onChangeManifestUrl }: Props) {\n  const inputRef = useRef<HTMLInputElement>(null);\n  return (\n    <Modal\n      actions={[\n        <Button flat modal=\"close\" node=\"button\" waves=\"green\">Close</Button>,\n        <Button modal=\"close\" className=\"waves-effect waves-light red lighten-2\" node=\"button\" onClick={() => {\n          onChangeManifestUrl(inputRef.current!!.value)\n        }}>Load</Button>\n      ]}\n      bottomSheet={false}\n      fixedFooter={false}\n      header=\"Load manifest from URL\"\n      id=\"modal-0\"\n      options={{\n        dismissible: true,\n        endingTop: '10%',\n        inDuration: 250,\n        onCloseEnd: null,\n        onCloseStart: null,\n        onOpenEnd: null,\n        onOpenStart: null,\n        opacity: 0.5,\n        outDuration: 250,\n        preventScrolling: true,\n        startingTop: '4%'\n      }}\n      trigger={trigger}\n    >\n      <form className=\"\">\n        <input ref={inputRef} type=\"text\" className=\"textbox\" placeholder=\"Enter manifest URL\" onKeyDown={(ev) => {\n          if (ev.keyCode === 13) {\n            onChangeManifestUrl(inputRef.current!!.value)\n          }\n        }} />\n      </form>\n    </Modal>\n  );\n}\n","import React from \"react\";\nimport Spinner from \"./Spinner\";\nimport { BrowserHeader } from \"./BrowserHeader\";\nimport Autosuggest from \"react-autosuggest\";\nimport { LoadManifestModal } from \"./LoadManifestModal\";\n\ninterface Props {\n  loaded: boolean,\n  onChangeManifestUrl: (url: string) => void\n}\n\nexport const GraphBrowserLoader = ({ loaded, onChangeManifestUrl }: Props) => {\n  return (\n    <div>\n      <div className=\"container\">\n        {loaded ? (\n        <div className=\"row search-bar\">\n          <div className=\"col s12\">\n          <div className=\"card\">\n            <div className=\"card-content\">\n              <div className=\"card-title\">\n                Welcome to Dagger Browser\n              </div>\n              Dagger Browser is a simple tool for easily navigating a project's Dagger graph. The graph data is generated by a Dagger SPI plugin and supplied via a JSON manifest file.\n              <div className=\"center-align\">\n              <LoadManifestModal \n                onChangeManifestUrl={onChangeManifestUrl}\n                trigger={<a className=\"btn red lighten-2\" href=\"#\">Load manifest from URL</a>}/>\n              </div>\n            </div>\n          </div>            \n          </div>\n        </div>\n        ) : (\n        <div className=\"row\">\n          <div className=\"col s12 center-align\">         \n            <Spinner/>\n          </div>\n        </div>  \n        )}\n      </div>    \n    </div>\n  );\n};\n\nexport default GraphBrowserLoader;\n","import GraphManager from \"../models/GraphManager\";\nimport GraphReducer from \"../models/GraphReducer\";\nimport { Weight } from \"../models/Graph\";\nimport WeightService from \"./WeightService\";\n\nconst LARGE_THRESHOLD = 500;\nconst SMALL_THRESHOLD = 10;\n\n/** Service that computes the number of bindings for a given component and node. */\nexport default class BindingsService implements WeightService {\n\n  private nodeWeights: { [componentName: string]: { [key: string]: Weight } };\n  private graphManager: GraphManager;\n\n  constructor(graphManager: GraphManager) {\n    this.graphManager = graphManager;\n    this.nodeWeights = {};\n  }\n\n  getWeight(componentName: string, node?: string): Weight | undefined {\n    if (node) {\n      if (!this.nodeWeights[componentName]) {\n        this.nodeWeights[componentName] = {};\n      }\n      if (!this.nodeWeights[componentName][node]) {\n        this.nodeWeights[componentName][node] =\n            this.graphManager.computeNodeWeight(componentName, node, new GraphReducerImpl());\n      }\n      return this.nodeWeights[componentName][node];\n    } else {\n      return {\n        value: this.graphManager.getComponent(componentName).nodes.length,\n        largeThreshold: LARGE_THRESHOLD,\n        smallThreshold: SMALL_THRESHOLD\n      } as Weight;\n    }\n  }\n}\n\nclass GraphReducerImpl implements GraphReducer {\n  weight: Weight;\n\n  constructor() {\n    this.weight = {\n      value: 0,\n      largeThreshold: LARGE_THRESHOLD,\n      smallThreshold: SMALL_THRESHOLD\n    } as Weight;\n  }\n\n  reduce(key: string) {\n    this.weight.value++;\n  }\n\n  result(): Weight {\n    return this.weight;\n  }\n}\n","const METHOD_SIZE_BYTES = 60;\nconst FIELD_SIZE_BYTES = 30;\n\n/** Stores class information from ApkAnalyzer output. */\nexport type ClassInfo = {\n  method_count: number;\n  lambda_count?: number; // temporarily optional for backward compatibility\n  field_count: number;\n  size: number;\n  inner_class_count?: number; // temporarily optional for backward compatibility\n}\n\n/** Convenience class to output summary and memory based on class information. */\nexport default class ClassSize {\n  classInfo: ClassInfo;\n\n  constructor(classInfo: ClassInfo) {\n    this.classInfo = classInfo;\n  }\n\n  /** Returns the class info as a single string, useful for popups or title/alt attributes. */\n  getSummary(): string {\n    let size = this.classInfo.size;\n    let unit = 'B';\n    if (size >= 1024) {\n      size = Math.round(size / 1024);\n      unit = 'kB';\n    }\n    return `dex size: ${size} ${unit}` +\n        `\\nmethods: ${this.classInfo.method_count}` +\n        (this.classInfo.lambda_count ? `\\nlambdas: ${this.classInfo.lambda_count}` : ``) +\n        `\\nfields: ${this.classInfo.field_count}` +\n        (this.classInfo.inner_class_count ? `\\ninner classes: ${this.classInfo.inner_class_count}` : ``);\n  }\n\n  /** Returns estimated memory size in bytes. */\n  getMemorySize(): number {\n    return this.classInfo.size + this.classInfo.method_count * METHOD_SIZE_BYTES + this.classInfo.field_count * FIELD_SIZE_BYTES;\n  }\n\n  add(classSize: ClassSize) {\n    this.classInfo.method_count += classSize.classInfo.method_count;\n    if (classSize.classInfo.lambda_count) {\n      const count = this.classInfo.lambda_count || 0;\n      this.classInfo.lambda_count = count + classSize.classInfo.lambda_count;\n    }\n    this.classInfo.field_count += classSize.classInfo.field_count;\n    this.classInfo.size += classSize.classInfo.size;\n    if (classSize.classInfo.inner_class_count) {\n      const count = this.classInfo.inner_class_count || 0;\n      this.classInfo.inner_class_count = count + classSize.classInfo.inner_class_count;\n    }\n  }\n}\n","import ClassSize, { ClassInfo } from \"../models/ClassSize\";\nimport { Weight } from \"../models/Graph\";\nimport WeightService from \"./WeightService\";\n\nconst LARGE_THRESHOLD_KB = 20; // Nodes over 10KB are considered \"large\"\nconst SMALL_THRESHOLD_KB = 3; // Nodes less than 3KB are considered \"small\"\n\n/**\n * Service to get class size for a given class name.\n */\nexport default class ClassSizeService implements WeightService {\n  /** Class information - method/field count and dex size - stored per fully qualified class name. */\n  classInfo: { [key: string]: ClassInfo };\n\n  constructor(classInfo: { [key: string]: ClassInfo }) {\n    this.classInfo = classInfo;\n  }\n\n  getWeight(componentName: string, node?: string): Weight | undefined {\n    const classSize = this.getClassSize(node ? node : componentName);\n    if (classSize) {\n      var memorySizeKb = classSize.getMemorySize() / 1024;\n      if (memorySizeKb > 1) {\n        memorySizeKb = Math.round(memorySizeKb);\n      }\n\n      return {\n        value: memorySizeKb,\n        largeThreshold: LARGE_THRESHOLD_KB,\n        smallThreshold: SMALL_THRESHOLD_KB,\n        summary: classSize.getSummary(),\n        unit: 'kB'\n      } as Weight;\n    }\n  }\n\n  getClassSize(className: string): ClassSize | undefined {\n    const info = this.classInfo[className];\n    if (info) {\n      return new ClassSize(info);\n    }\n  }\n}\n","import ClassSize, { ClassInfo } from \"../models/ClassSize\";\nimport GraphManager from \"../models/GraphManager\";\nimport GraphReducer from \"../models/GraphReducer\";\nimport { Weight } from \"../models/Graph\";\nimport ClassSizeService  from \"./ClassSizeService\";\nimport WeightService from \"./WeightService\";\n\nconst LARGE_THRESHOLD_KB = 1000; // Nodes over 1MB are considered \"large\"\nconst SMALL_THRESHOLD_KB = 50; // Nodes less than 50KB are considered \"small\"\n\n/**\n * Service to compute the graph weight in terms of memory.\n * This is based on transitive dependencies per node and on the methods, fields, and dex code size.\n */\nexport default class GraphSizeService implements WeightService {\n\n  private nodeWeights: { [componentName: string]: { [key: string]: Weight } };\n  private graphManager: GraphManager;\n  private classSizeService: ClassSizeService;\n\n  constructor(graphManager: GraphManager, classSizeService: ClassSizeService) {\n    this.graphManager = graphManager;\n    this.classSizeService = classSizeService;\n    this.nodeWeights = {};\n  }\n\n  getWeight(componentName: string, node?: string): Weight | undefined {\n    if (!this.nodeWeights[componentName]) {\n      this.nodeWeights[componentName] = {};\n    }\n\n    if (node) {\n      if (!this.nodeWeights[componentName][node]) {\n        const graphReducer = new GraphReducerImpl(this.classSizeService, node);\n        this.nodeWeights[componentName][node] =\n            this.graphManager.computeNodeWeight(componentName, node, graphReducer);\n      }\n      return this.nodeWeights[componentName][node];\n    } else {\n      if (!this.nodeWeights[componentName][componentName]) {\n        const nodes = Object.assign([], this.graphManager.getComponent(componentName).nodes);\n        const graphReducer = new GraphReducerImpl(this.classSizeService, componentName);\n        this.nodeWeights[componentName][componentName] =\n            this.graphManager.computeWeightForNodes(componentName, nodes, graphReducer);\n      }\n      return this.nodeWeights[componentName][componentName];\n    }\n  }\n}\n\nclass GraphReducerImpl implements GraphReducer {\n  private classSize: ClassSize;\n  private classSizeService: ClassSizeService;\n\n  /**\n   * Tracks nodes that have already been reduced. This is necessary to count Dagger modules\n   * just once. They may be a common dependency and counted multiple times.\n   */\n  private reduced: Set<string>;\n\n  constructor(classSizeService: ClassSizeService, initialKey: string) {\n    this.classSizeService = classSizeService;\n    this.reduced = new Set();\n\n    const classInfo = {\n      'field_count': 0,\n      'method_count': 0,\n      'lambda_count': 0,\n      'size': 0,\n      'inner_class_count': 0\n    } as ClassInfo;\n    this.classSize = new ClassSize(classInfo);\n    const parentClassSize = this.classSizeService.getClassSize(initialKey);\n    if (parentClassSize) {\n      this.classSize.add(parentClassSize);\n    }\n  }\n\n  reduce(key: string) {\n    if (this.reduced.has(key)) {\n      return;\n    }\n\n    this.reduced.add(key);\n    const childClassSize = this.classSizeService.getClassSize(key);\n    if (childClassSize) {\n      this.classSize.add(childClassSize);\n    }\n  }\n\n  result(): Weight {\n    return {\n      value: Math.round(this.classSize.getMemorySize() / 1024),\n      largeThreshold: LARGE_THRESHOLD_KB,\n      smallThreshold: SMALL_THRESHOLD_KB,\n      summary: this.classSize.getSummary(),\n      unit: 'kB'\n    } as Weight;\n  }\n}","import GraphManager from \"../models/GraphManager\";\nimport BindingsService from \"./BindingsService\";\nimport ClassSizeService from \"./ClassSizeService\";\nimport GraphSizeService from \"./GraphSizeService\";\nimport WeightService from \"./WeightService\";\n\n/** Manages currently selected weight service. */\nexport default class WeightServiceManager {\n\n  private weightServices: { [key: string]: WeightService };\n  private weightService: WeightService;\n\n  constructor(graphManager: GraphManager) {\n    // Add bindings count as the default service.\n    this.weightServices = {};\n    this.weightService = this.weightServices['bindings'] = new BindingsService(graphManager);\n\n    // TODO: Separate services into a config file.\n    if (graphManager.classInfo && Object.keys(graphManager.classInfo).length) { \n      const classSizeService = new ClassSizeService(graphManager.classInfo);\n      this.weightServices['class memory'] = classSizeService;\n      this.weightServices['graph memory'] = new GraphSizeService(graphManager, classSizeService);\n    }\n  }\n\n  getWeightServiceNames(): Array<string> {\n    return Object.keys(this.weightServices).sort();\n  }\n\n  getWeightService(): WeightService {\n    return this.weightService;\n  }\n\n  selectWeightService(weight: string) {\n    this.weightService = this.weightServices[weight];\n  }\n}","import { Link } from \"react-router-dom\";\nimport Config from \"../models/Config\";\nimport Routes from \"../Routes\";\nimport { LoadManifestModal } from \"./LoadManifestModal\";\nimport React, { useRef } from \"react\";\nimport {Navbar, Icon, NavItem, Dropdown, Divider, Modal, Button} from \"react-materialize\";\n\nexport interface Props {\n  manifestUrl?: string;\n  onChangeManifestUrl: (url: string) => void\n}\n\nexport function BrowserHeader({ manifestUrl, onChangeManifestUrl }: Props) {\n  return (\n    <nav>\n      <div className=\"container\">\n        <div className=\"nav-wrapper\">\n          <Link to={Routes.Home} className=\"brand-logo\">\n            {Config.TITLE}\n          </Link>\n          {manifestUrl && (\n          <div className=\"right hide-on-med-and-down\">\n            <Dropdown\n            options={{\n              alignment: 'right',\n              autoTrigger: true,\n              closeOnClick: true,\n              constrainWidth: false,\n              container: null,\n              coverTrigger: false,\n              hover: false,\n              inDuration: 150,\n              onCloseEnd: null,\n              onCloseStart: null,\n              onOpenEnd: null,\n              onOpenStart: null,\n              outDuration: 250\n            }}\n            trigger={<a href=\"#!\"><Icon right>settings</Icon></a>}\n          >\n            <LoadManifestModal onChangeManifestUrl={onChangeManifestUrl} trigger={<a href=\"#\">Load manifest from URL</a>} />\n            <a href={manifestUrl}\n              target=\"_blank\"\n              title=\"Download JSON\">\n              Download manifest\n            </a>\n          </Dropdown>\n          </div>\n          )}\n        </div>\n      </div>\n    </nav>\n  );\n}\n","import React, { useCallback, FunctionComponent } from 'react'\nimport { useDropzone } from 'react-dropzone'\n\n\ntype Props = {\n    manifestUrl?: string;\n    onFilesSelected: (files: File[]) => void\n}\n\nconst FileDropzone: FunctionComponent<Props> = ({ manifestUrl, onFilesSelected, children }) => {\n    const onDrop = useCallback(onFilesSelected, [])\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n    return (\n        <div {...getRootProps()}>\n            {\n                isDragActive ?\n                    (<div>\n                        {children}\n                        <div className=\"full-screen-alert\">\n                            <p>Drop to load manifest...</p>\n                        </div>\n                    </div>\n                    ) :\n\n                    children\n            }\n        </div>\n    )\n}\n\nexport default FileDropzone","import React from \"react\"\nimport DaggerBrowser from \"./components/GraphBrowser\";\nimport GraphBrowserLoader from \"./components/GraphBrowserLoader\";\nimport { Route, HashRouter } from \"react-router-dom\";\nimport GraphManager from \"./models/GraphManager\";\nimport { QueryParamProvider } from \"use-query-params\";\nimport { Paths } from \"./Routes\";\nimport WeightServiceManager from \"./service/WeightServiceManager\";\nimport { BrowserHeader } from \"./components/BrowserHeader\";\nimport FileDropzone from \"./components/FileDropzone\";\nimport Config from \"./models/Config\";\n\ninterface AppState {\n  manifestUrl?: string;\n  manifestFile?: File\n  loadedManifest: boolean;\n  weightServiceManager?: WeightServiceManager\n}\n\nclass App extends React.Component<any, AppState> {\n  private graphManager = new GraphManager();\n  \n  constructor(props: any) {\n    super(props);\n    this.state = {\n      manifestUrl: Config.COMPONENTS_MANIFEST_JSON_URL,\n      loadedManifest: false\n    };\n  }\n\n  componentDidMount() {\n    this.refresh()\n  }\n\n  componentDidUpdate() {\n    this.refresh()\n  }\n\n  async refresh() {\n    if (!this.state.loadedManifest) {\n      if (this.state.manifestFile) {\n        const success = await this.graphManager.loadFile(this.state.manifestFile);\n        this.setState({\n          weightServiceManager: success ? new WeightServiceManager(this.graphManager) : undefined,\n          loadedManifest: true\n        }) \n      } else if (this.state.manifestUrl) {\n        const success = await this.graphManager.loadUrl(this.state.manifestUrl);\n        this.setState({\n          weightServiceManager: success ? new WeightServiceManager(this.graphManager) : undefined,\n          loadedManifest: true\n        })      \n      }\n    }\n  }\n\n  private onChangeManifestUrl(url: string) {\n    this.setState({\n      manifestUrl: url,\n      loadedManifest: false\n    })\n  }\n\n  private onChangeManifestFile(acceptedFiles: File[]) {\n    if (acceptedFiles.length !== 1) {\n      alert(\"Upload a single ComponentsManifest.json\")\n      return\n    }\n\n    const file = acceptedFiles[0]\n    if (file.type != \"application/json\") {\n      alert(\"Manifest must be a json file\")\n      return\n    }\n\n    this.setState({\n      manifestFile: file,\n      loadedManifest: false\n    })\n  }\n\n  render() {\n    return <HashRouter>\n      <QueryParamProvider ReactRouterRoute={Route}>\n        <Route  \n          path={Paths.Home}\n          render={props => (\n              <FileDropzone onFilesSelected={(files) => this.onChangeManifestFile(files)}>\n                <div>\n                  <BrowserHeader manifestUrl={this.graphManager.manifestUrl} onChangeManifestUrl={(url) => this.onChangeManifestUrl(url)} />\n                  {this.state.weightServiceManager ? (\n                    <DaggerBrowser\n                      componentName={props.match.params.component ? decodeURIComponent(props.match.params.component) : \"\"}\n                      graphManager={this.graphManager}\n                      weightServiceManager={this.state.weightServiceManager}\n                    />\n                  ) : (\n                      <GraphBrowserLoader loaded={this.state.loadedManifest} onChangeManifestUrl={(url) => this.onChangeManifestUrl(url)} />\n                    )}\n                </div>\n            </FileDropzone>\n          )}\n        />\n      </QueryParamProvider>\n    </HashRouter>;\n  }\n}\n\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}